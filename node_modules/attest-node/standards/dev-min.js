module.exports = {
 "rules": [
  {
   "id": "area-alt",
   "selector": "map area[href]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt",
    "non-empty-title",
    "aria-label",
    "aria-labelledby"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "button-name",
   "selector": "button, [role=\"button\"], input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-if-present",
    "non-empty-value",
    "button-has-visible-text",
    "aria-label",
    "aria-labelledby",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "cat.name-role-value",
    "wcag2a",
    "wcag412",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "definition-list",
   "selector": "dl:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "structured-dlitems",
    "only-dlitems"
   ],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "dlitem",
   "selector": "dd:not([role]), dt:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "dlitem"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "duplicate-id",
   "selector": "[id]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "duplicate-id"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.parsing",
    "wcag2a",
    "wcag411"
   ]
  },
  {
   "id": "image-alt",
   "selector": "img, [role='img']",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-alt",
    "aria-label",
    "aria-labelledby",
    "non-empty-title",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "input-image-alt",
   "selector": "input[type=\"image\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt",
    "aria-label",
    "aria-labelledby",
    "non-empty-title"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "label",
   "selector": "input:not([type='hidden']):not([type='image']):not([type='button']):not([type='submit']):not([type='reset']), select, textarea",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-label",
    "aria-labelledby",
    "implicit-label",
    "explicit-label",
    "non-empty-title"
   ],
   "all": [],
   "none": [
    "help-same-as-label",
    "multiple-label"
   ],
   "tags": [
    "cat.forms",
    "wcag2a",
    "wcag332",
    "wcag131",
    "section508",
    "section508.22.n"
   ]
  },
  {
   "id": "link-name",
   "selector": "a[href]:not([role=\"button\"]), [role=link][href]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-visible-text",
    "aria-label",
    "aria-labelledby",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "cat.name-role-value",
    "wcag2a",
    "wcag111",
    "wcag412",
    "wcag244",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "list",
   "selector": "ul:not([role]), ol:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "only-listitems"
   ],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "listitem",
   "selector": "li:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "listitem"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "accesskeys",
   "enabled": false
  },
  {
   "id": "aria-allowed-attr",
   "enabled": false
  },
  {
   "id": "aria-hidden-body",
   "enabled": false
  },
  {
   "id": "aria-required-attr",
   "enabled": false
  },
  {
   "id": "aria-required-children",
   "enabled": false
  },
  {
   "id": "aria-required-parent",
   "enabled": false
  },
  {
   "id": "aria-roles",
   "enabled": false
  },
  {
   "id": "aria-valid-attr-value",
   "enabled": false
  },
  {
   "id": "aria-valid-attr",
   "enabled": false
  },
  {
   "id": "audio-caption",
   "enabled": false
  },
  {
   "id": "blink",
   "enabled": false
  },
  {
   "id": "bypass",
   "enabled": false
  },
  {
   "id": "checkboxgroup",
   "enabled": false
  },
  {
   "id": "color-contrast",
   "enabled": false
  },
  {
   "id": "document-title",
   "enabled": false
  },
  {
   "id": "empty-heading",
   "enabled": false
  },
  {
   "id": "frame-title-unique",
   "enabled": false
  },
  {
   "id": "frame-title",
   "enabled": false
  },
  {
   "id": "heading-order",
   "enabled": false
  },
  {
   "id": "hidden-content",
   "enabled": false
  },
  {
   "id": "href-no-hash",
   "enabled": false
  },
  {
   "id": "html-has-lang",
   "enabled": false
  },
  {
   "id": "html-lang-valid",
   "enabled": false
  },
  {
   "id": "image-redundant-alt",
   "enabled": false
  },
  {
   "id": "label-title-only",
   "enabled": false
  },
  {
   "id": "landmark-main-is-top-level",
   "enabled": false
  },
  {
   "id": "landmark-one-main",
   "enabled": false
  },
  {
   "id": "layout-table",
   "enabled": false
  },
  {
   "id": "link-in-text-block",
   "enabled": false
  },
  {
   "id": "marquee",
   "enabled": false
  },
  {
   "id": "meta-refresh",
   "enabled": false
  },
  {
   "id": "meta-viewport-large",
   "enabled": false
  },
  {
   "id": "meta-viewport",
   "enabled": false
  },
  {
   "id": "object-alt",
   "enabled": false
  },
  {
   "id": "p-as-heading",
   "enabled": false
  },
  {
   "id": "radiogroup",
   "enabled": false
  },
  {
   "id": "region",
   "enabled": false
  },
  {
   "id": "scope-attr-valid",
   "enabled": false
  },
  {
   "id": "server-side-image-map",
   "enabled": false
  },
  {
   "id": "skip-link",
   "enabled": false
  },
  {
   "id": "tabindex",
   "enabled": false
  },
  {
   "id": "table-duplicate-name",
   "enabled": false
  },
  {
   "id": "table-fake-caption",
   "enabled": false
  },
  {
   "id": "td-has-header",
   "enabled": false
  },
  {
   "id": "td-headers-attr",
   "enabled": false
  },
  {
   "id": "th-has-data-cells",
   "enabled": false
  },
  {
   "id": "valid-lang",
   "enabled": false
  },
  {
   "id": "video-caption",
   "enabled": false
  },
  {
   "id": "video-description",
   "enabled": false
  }
 ],
 "checks": [
  {
   "id": "non-empty-alt",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('alt');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-title",
   "evaluate": "function evaluate(node, options) {\n        var title = node.getAttribute('title');\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-label",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('aria-label');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-labelledby",
   "evaluate": "function evaluate(node, options) {\n        var getIdRefs = axe.commons.dom.idrefs;\n        return getIdRefs(node, 'aria-labelledby').some(function(elm) {\n          return elm && axe.commons.text.accessibleText(elm, true);\n        });\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-if-present",
   "evaluate": "function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var type = (node.getAttribute('type') || '').toLowerCase();\n        var label = node.getAttribute('value');\n        this.data(label);\n        if (nodeName === 'INPUT' && [ 'submit', 'reset' ].indexOf(type) !== -1) {\n          return label === null;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-value",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('value');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "button-has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var role = node.getAttribute('role');\n        var label = void 0;\n        if (nodeName === 'BUTTON' || role === 'button' && nodeName !== 'INPUT') {\n          label = axe.commons.text.accessibleText(node);\n          this.data(label);\n          return !!label;\n        } else {\n          return false;\n        }\n      }",
   "enabled": true
  },
  {
   "id": "role-presentation",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'presentation';\n      }",
   "enabled": true
  },
  {
   "id": "role-none",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'none';\n      }",
   "enabled": true
  },
  {
   "id": "focusable-no-name",
   "evaluate": "function evaluate(node, options) {\n        var tabIndex = node.getAttribute('tabindex'), isFocusable = axe.commons.dom.isFocusable(node) && tabIndex > -1;\n        if (!isFocusable) {\n          return false;\n        }\n        return !axe.commons.text.accessibleText(node);\n      }",
   "enabled": true
  },
  {
   "id": "structured-dlitems",
   "evaluate": "function evaluate(node, options) {\n        var children = node.children;\n        if (!children || !children.length) {\n          return false;\n        }\n        var hasDt = false, hasDd = false, nodeName;\n        for (var i = 0; i < children.length; i++) {\n          nodeName = children[i].nodeName.toUpperCase();\n          if (nodeName === 'DT') {\n            hasDt = true;\n          }\n          if (hasDt && nodeName === 'DD') {\n            return false;\n          }\n          if (nodeName === 'DD') {\n            hasDd = true;\n          }\n        }\n        return hasDt || hasDd;\n      }",
   "enabled": true
  },
  {
   "id": "only-dlitems",
   "evaluate": "function evaluate(node, options) {\n        var child, nodeName, bad = [], children = node.childNodes, permitted = [ 'STYLE', 'META', 'LINK', 'MAP', 'AREA', 'SCRIPT', 'DATALIST', 'TEMPLATE' ], hasNonEmptyTextNode = false;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          var nodeName = child.nodeName.toUpperCase();\n          if (child.nodeType === 1 && nodeName !== 'DT' && nodeName !== 'DD' && permitted.indexOf(nodeName) === -1) {\n            bad.push(child);\n          } else if (child.nodeType === 3 && child.nodeValue.trim() !== '') {\n            hasNonEmptyTextNode = true;\n          }\n        }\n        if (bad.length) {\n          this.relatedNodes(bad);\n        }\n        var retVal = !!bad.length || hasNonEmptyTextNode;\n        return retVal;\n      }",
   "enabled": true
  },
  {
   "id": "dlitem",
   "evaluate": "function evaluate(node, options) {\n        return node.parentNode.tagName.toUpperCase() === 'DL';\n      }",
   "enabled": true
  },
  {
   "id": "duplicate-id",
   "evaluate": "function evaluate(node, options) {\n        if (!node.getAttribute('id').trim()) {\n          return true;\n        }\n        var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n        var matchingNodes = document.querySelectorAll('[id=\"' + id + '\"]');\n        var related = [];\n        for (var i = 0; i < matchingNodes.length; i++) {\n          if (matchingNodes[i] !== node) {\n            related.push(matchingNodes[i]);\n          }\n        }\n        if (related.length) {\n          this.relatedNodes(related);\n        }\n        this.data(node.getAttribute('id'));\n        return matchingNodes.length <= 1;\n      }",
   "after": "function after(results, options) {\n        var uniqueIds = [];\n        return results.filter(function(r) {\n          if (uniqueIds.indexOf(r.data) === -1) {\n            uniqueIds.push(r.data);\n            return true;\n          }\n          return false;\n        });\n      }",
   "enabled": true
  },
  {
   "id": "has-alt",
   "evaluate": "function evaluate(node, options) {\n        var nn = node.nodeName.toLowerCase();\n        return node.hasAttribute('alt') && (nn === 'img' || nn === 'input' || nn === 'area');\n      }",
   "enabled": true
  },
  {
   "id": "implicit-label",
   "evaluate": "function evaluate(node, options) {\n        var label = axe.commons.dom.findUp(node, 'label');\n        if (label) {\n          return !!axe.commons.text.accessibleText(label);\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "explicit-label",
   "evaluate": "function evaluate(node, options) {\n        if (node.getAttribute('id')) {\n          var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n          var label = document.querySelector('label[for=\"' + id + '\"]');\n          if (label) {\n            return !!axe.commons.text.accessibleText(label);\n          }\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "help-same-as-label",
   "enabled": false,
   "evaluate": "function evaluate(node, options) {\n        var labelText = axe.commons.text.label(node), check = node.getAttribute('title');\n        if (!labelText) {\n          return false;\n        }\n        if (!check) {\n          check = '';\n          if (node.getAttribute('aria-describedby')) {\n            var ref = axe.commons.dom.idrefs(node, 'aria-describedby');\n            check = ref.map(function(thing) {\n              return thing ? axe.commons.text.accessibleText(thing) : '';\n            }).join('');\n          }\n        }\n        return axe.commons.text.sanitize(check) === axe.commons.text.sanitize(labelText);\n      }"
  },
  {
   "id": "multiple-label",
   "evaluate": "function evaluate(node, options) {\n        var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n        var labels = Array.from(document.querySelectorAll('label[for=\"' + id + '\"]'));\n        var parent = node.parentNode;\n        if (labels.length) {\n          labels = labels.filter(function(label, index) {\n            if (index === 0 && !axe.commons.dom.isVisible(label, true) || axe.commons.dom.isVisible(label, true)) {\n              return label;\n            }\n          });\n        }\n        while (parent) {\n          if (parent.tagName === 'LABEL' && labels.indexOf(parent) === -1) {\n            labels.push(parent);\n          }\n          parent = parent.parentNode;\n        }\n        this.relatedNodes(labels);\n        return labels.length > 1;\n      }",
   "enabled": true
  },
  {
   "id": "has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        return axe.commons.text.accessibleText(node).length > 0;\n      }",
   "enabled": true
  },
  {
   "id": "only-listitems",
   "evaluate": "function evaluate(node, options) {\n        var child, nodeName, bad = [], children = node.childNodes, permitted = [ 'STYLE', 'META', 'LINK', 'MAP', 'AREA', 'SCRIPT', 'DATALIST', 'TEMPLATE' ], hasNonEmptyTextNode = false;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nodeName = child.nodeName.toUpperCase();\n          if (child.nodeType === 1 && nodeName !== 'LI' && permitted.indexOf(nodeName) === -1) {\n            bad.push(child);\n          } else if (child.nodeType === 3 && child.nodeValue.trim() !== '') {\n            hasNonEmptyTextNode = true;\n          }\n        }\n        if (bad.length) {\n          this.relatedNodes(bad);\n        }\n        return !!bad.length || hasNonEmptyTextNode;\n      }",
   "enabled": true
  },
  {
   "id": "listitem",
   "evaluate": "function evaluate(node, options) {\n        if ([ 'UL', 'OL' ].indexOf(node.parentNode.nodeName.toUpperCase()) !== -1) {\n          return true;\n        }\n        return node.parentNode.getAttribute('role') === 'list';\n      }",
   "enabled": true
  }
 ],
 "data": {
  "rules": {
   "area-alt": {
    "description": "Ensures <area> elements of image maps have alternate text",
    "help": "Active <area> elements must have alternate text",
    "mapping": {
     "ruleId": "010109-A",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Missing text equivalent for area."
    }
   },
   "button-name": {
    "description": "Ensures buttons have discernible text",
    "help": "Buttons must have discernible text",
    "mapping": {
     "ruleId": "SC412BTN",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Checks all <button> elements to ensure that they have a discernable accessible name"
    }
   },
   "definition-list": {
    "description": "Ensures <dl> elements are structured correctly",
    "help": "<dl> elements must only directly contain properly-ordered <dt> and <dd> groups, <script> or <template> elements",
    "mapping": {
     "ruleId": "SC411VAL",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Ensures that all <dl> elements are structured correctly"
    }
   },
   "dlitem": {
    "description": "Ensures <dt> and <dd> elements are contained by a <dl>",
    "help": "<dt> and <dd> elements must be contained by a <dl>",
    "mapping": {
     "ruleId": "SC411VAL",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Ensures that all <dd> and <dt> elements have a <dl> as a parent"
    }
   },
   "duplicate-id": {
    "description": "Ensures every id attribute value is unique",
    "help": "id attribute value must be unique",
    "mapping": {
     "ruleId": "SC411NID",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Ensures that each element on the page with an ID attribute has a unique ID attribute value"
    }
   },
   "image-alt": {
    "description": "Ensures <img> elements have alternate text or a role of none or presentation",
    "help": "Images must have alternate text",
    "mapping": {
     "ruleId": "IMG_NO_ALT",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <img> element has an alternative text or is marked as presentational"
    }
   },
   "input-image-alt": {
    "description": "Ensures <input type=\"image\"> elements have alternate text",
    "help": "Image buttons must have alternate text",
    "mapping": {
     "ruleId": "010103-A",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <input> that represents an image button has an accessible name"
    }
   },
   "label": {
    "description": "Ensures every form element has a label",
    "help": "Form elements must have labels",
    "mapping": {
     "ruleId": "120401-E",
     "SC": "1.3.1",
     "weight": 0,
     "description": "Ensures that every input element that requires a label, has an appropriate label"
    }
   },
   "link-name": {
    "description": "Ensures links have discernible text",
    "help": "Links must have discernible text",
    "mapping": {
     "ruleId": "SC412LNKN",
     "SC": "4.1.2",
     "weight": 1,
     "description": "Ensures that every link has an accessible name"
    }
   },
   "list": {
    "description": "Ensures that lists are structured correctly",
    "help": "<ul> and <ol> must only directly contain <li>, <script> or <template> elements",
    "mapping": {
     "ruleId": "030601-C",
     "SC": "1.3.1",
     "weight": 1,
     "description": "Ensures that lists are structured correctly"
    }
   },
   "listitem": {
    "description": "Ensures <li> elements are used semantically",
    "help": "<li> elements must be contained in a <ul> or <ol>",
    "mapping": {
     "ruleId": "030601-A",
     "SC": "1.3.1",
     "weight": 1,
     "description": "Ensures that every list item is used semantically"
    }
   }
  },
  "checks": {
   "non-empty-alt": {
    "impact": "critical"
   },
   "non-empty-title": {
    "impact": "serious"
   },
   "aria-label": {
    "impact": "serious"
   },
   "aria-labelledby": {
    "impact": "serious"
   },
   "non-empty-if-present": {
    "impact": "critical"
   },
   "non-empty-value": {
    "impact": "critical"
   },
   "button-has-visible-text": {
    "impact": "critical"
   },
   "role-presentation": {
    "impact": "minor"
   },
   "role-none": {
    "impact": "minor"
   },
   "focusable-no-name": {
    "impact": "serious"
   },
   "structured-dlitems": {
    "impact": "serious"
   },
   "only-dlitems": {
    "impact": "serious"
   },
   "dlitem": {
    "impact": "serious"
   },
   "duplicate-id": {
    "impact": "moderate"
   },
   "has-alt": {
    "impact": "critical"
   },
   "implicit-label": {
    "impact": "critical"
   },
   "explicit-label": {
    "impact": "critical"
   },
   "help-same-as-label": {
    "impact": "minor"
   },
   "multiple-label": {
    "impact": "serious"
   },
   "has-visible-text": {
    "impact": "minor"
   },
   "only-listitems": {
    "impact": "serious"
   },
   "listitem": {
    "impact": "serious"
   }
  }
 }
};