module.exports = {
 "rules": [
  {
   "id": "area-alt",
   "selector": "map area[href]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt",
    "non-empty-title",
    "aria-label",
    "aria-labelledby"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "audio-caption",
   "selector": "audio",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "caption"
   ],
   "tags": [
    "cat.time-and-media",
    "wcag2a",
    "wcag122",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "blink",
   "selector": "blink",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "is-on-screen"
   ],
   "tags": [
    "cat.time-and-media",
    "wcag2a",
    "wcag222",
    "section508",
    "section508.22.j"
   ]
  },
  {
   "id": "button-name",
   "selector": "button, [role=\"button\"], input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-if-present",
    "non-empty-value",
    "button-has-visible-text",
    "aria-label",
    "aria-labelledby",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "cat.name-role-value",
    "wcag2a",
    "wcag412",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "bypass",
   "selector": "html",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": true,
   "any": [
    "internal-link-present",
    "header-present",
    "landmark"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.keyboard",
    "wcag2a",
    "wcag241",
    "section508",
    "section508.22.o"
   ],
   "matches": "function matches(node) {\n        return !!node.querySelector('a[href]');\n      }"
  },
  {
   "id": "frame-title",
   "selector": "frame, iframe",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-label",
    "aria-labelledby",
    "non-empty-title",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag241",
    "section508",
    "section508.22.i"
   ]
  },
  {
   "id": "image-alt",
   "selector": "img, [role='img']",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-alt",
    "aria-label",
    "aria-labelledby",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "input-image-alt",
   "selector": "input[type=\"image\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt",
    "aria-label",
    "aria-labelledby",
    "non-empty-title"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "label",
   "selector": "input:not([type='hidden']):not([type='image']):not([type='button']):not([type='submit']):not([type='reset']), select, textarea",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-label",
    "aria-labelledby",
    "implicit-label",
    "explicit-label"
   ],
   "all": [],
   "none": [
    "help-same-as-label",
    "multiple-label"
   ],
   "tags": [
    "cat.forms",
    "wcag2a",
    "wcag332",
    "wcag131",
    "section508",
    "section508.22.n"
   ]
  },
  {
   "id": "link-name",
   "selector": "a[href]:not([role=\"button\"]), [role=link][href]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-visible-text",
    "aria-label",
    "aria-labelledby",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "cat.name-role-value",
    "wcag2a",
    "wcag111",
    "wcag412",
    "wcag244",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "object-alt",
   "selector": "object",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-visible-text",
    "aria-label",
    "aria-labelledby",
    "non-empty-title"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "server-side-image-map",
   "selector": "img[ismap]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "exists"
   ],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag211",
    "section508",
    "section508.22.f"
   ]
  },
  {
   "id": "table-fake-caption",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "caption-faked"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "experimental",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "td-has-header",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "td-has-header"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "experimental",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        if (axe.commons.table.isDataTable(node)) {\n          var tableArray = axe.commons.table.toArray(node);\n          return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;\n        }\n        return false;\n      }"
  },
  {
   "id": "td-headers-attr",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "td-headers-attr"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ]
  },
  {
   "id": "th-has-data-cells",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "th-has-data-cells"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "video-caption",
   "selector": "video",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "caption"
   ],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag122",
    "wcag123",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "video-description",
   "selector": "video",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "description"
   ],
   "tags": [
    "cat.text-alternatives",
    "wcag2aa",
    "wcag125",
    "section508",
    "section508.22.b"
   ]
  },
  {
   "id": "accesskeys",
   "enabled": false
  },
  {
   "id": "aria-allowed-attr",
   "enabled": false
  },
  {
   "id": "aria-hidden-body",
   "enabled": false
  },
  {
   "id": "aria-required-attr",
   "enabled": false
  },
  {
   "id": "aria-required-children",
   "enabled": false
  },
  {
   "id": "aria-required-parent",
   "enabled": false
  },
  {
   "id": "aria-roles",
   "enabled": false
  },
  {
   "id": "aria-valid-attr-value",
   "enabled": false
  },
  {
   "id": "aria-valid-attr",
   "enabled": false
  },
  {
   "id": "checkboxgroup",
   "enabled": false
  },
  {
   "id": "color-contrast",
   "enabled": false
  },
  {
   "id": "definition-list",
   "enabled": false
  },
  {
   "id": "dlitem",
   "enabled": false
  },
  {
   "id": "document-title",
   "enabled": false
  },
  {
   "id": "duplicate-id",
   "enabled": false
  },
  {
   "id": "empty-heading",
   "enabled": false
  },
  {
   "id": "frame-title-unique",
   "enabled": false
  },
  {
   "id": "heading-order",
   "enabled": false
  },
  {
   "id": "hidden-content",
   "enabled": false
  },
  {
   "id": "href-no-hash",
   "enabled": false
  },
  {
   "id": "html-has-lang",
   "enabled": false
  },
  {
   "id": "html-lang-valid",
   "enabled": false
  },
  {
   "id": "image-redundant-alt",
   "enabled": false
  },
  {
   "id": "label-title-only",
   "enabled": false
  },
  {
   "id": "landmark-main-is-top-level",
   "enabled": false
  },
  {
   "id": "landmark-one-main",
   "enabled": false
  },
  {
   "id": "layout-table",
   "enabled": false
  },
  {
   "id": "link-in-text-block",
   "enabled": false
  },
  {
   "id": "list",
   "enabled": false
  },
  {
   "id": "listitem",
   "enabled": false
  },
  {
   "id": "marquee",
   "enabled": false
  },
  {
   "id": "meta-refresh",
   "enabled": false
  },
  {
   "id": "meta-viewport-large",
   "enabled": false
  },
  {
   "id": "meta-viewport",
   "enabled": false
  },
  {
   "id": "p-as-heading",
   "enabled": false
  },
  {
   "id": "radiogroup",
   "enabled": false
  },
  {
   "id": "region",
   "enabled": false
  },
  {
   "id": "scope-attr-valid",
   "enabled": false
  },
  {
   "id": "skip-link",
   "enabled": false
  },
  {
   "id": "tabindex",
   "enabled": false
  },
  {
   "id": "table-duplicate-name",
   "enabled": false
  },
  {
   "id": "valid-lang",
   "enabled": false
  }
 ],
 "checks": [
  {
   "id": "non-empty-alt",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('alt');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-title",
   "evaluate": "function evaluate(node, options) {\n        var title = node.getAttribute('title');\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-label",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('aria-label');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-labelledby",
   "evaluate": "function evaluate(node, options) {\n        var getIdRefs = axe.commons.dom.idrefs;\n        return getIdRefs(node, 'aria-labelledby').some(function(elm) {\n          return elm && axe.commons.text.accessibleText(elm, true);\n        });\n      }",
   "enabled": true
  },
  {
   "id": "caption",
   "evaluate": "function evaluate(node, options) {\n        var tracks = node.querySelectorAll('track');\n        if (tracks.length) {\n          for (var i = 0; i < tracks.length; i++) {\n            var kind = tracks[i].getAttribute('kind');\n            if (kind && kind === 'captions') {\n              return false;\n            }\n          }\n          return true;\n        }\n        return undefined;\n      }",
   "enabled": true
  },
  {
   "id": "is-on-screen",
   "evaluate": "function evaluate(node, options) {\n        return axe.commons.dom.isVisible(node, false) && !axe.commons.dom.isOffscreen(node);\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-if-present",
   "evaluate": "function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var type = (node.getAttribute('type') || '').toLowerCase();\n        var label = node.getAttribute('value');\n        this.data(label);\n        if (nodeName === 'INPUT' && [ 'submit', 'reset' ].indexOf(type) !== -1) {\n          return label === null;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-value",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('value');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "button-has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var role = node.getAttribute('role');\n        var label = void 0;\n        if (nodeName === 'BUTTON' || role === 'button' && nodeName !== 'INPUT') {\n          label = axe.commons.text.accessibleText(node);\n          this.data(label);\n          return !!label;\n        } else {\n          return false;\n        }\n      }",
   "enabled": true
  },
  {
   "id": "role-presentation",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'presentation';\n      }",
   "enabled": true
  },
  {
   "id": "role-none",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'none';\n      }",
   "enabled": true
  },
  {
   "id": "focusable-no-name",
   "evaluate": "function evaluate(node, options) {\n        var tabIndex = node.getAttribute('tabindex'), isFocusable = axe.commons.dom.isFocusable(node) && tabIndex > -1;\n        if (!isFocusable) {\n          return false;\n        }\n        return !axe.commons.text.accessibleText(node);\n      }",
   "enabled": true
  },
  {
   "id": "internal-link-present",
   "evaluate": "function evaluate(node, options) {\n        return !!node.querySelector('a[href^=\"#\"]');\n      }",
   "enabled": true
  },
  {
   "id": "header-present",
   "evaluate": "function evaluate(node, options) {\n        return !!node.querySelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n      }",
   "enabled": true
  },
  {
   "id": "landmark",
   "evaluate": "function evaluate(node, options) {\n        return node.getElementsByTagName('main').length > 0 || !!node.querySelector('[role=\"main\"]');\n      }",
   "enabled": true
  },
  {
   "id": "has-alt",
   "evaluate": "function evaluate(node, options) {\n        var nn = node.nodeName.toLowerCase();\n        return node.hasAttribute('alt') && (nn === 'img' || nn === 'input' || nn === 'area');\n      }",
   "enabled": true
  },
  {
   "id": "implicit-label",
   "evaluate": "function evaluate(node, options) {\n        var label = axe.commons.dom.findUp(node, 'label');\n        if (label) {\n          return !!axe.commons.text.accessibleText(label);\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "explicit-label",
   "evaluate": "function evaluate(node, options) {\n        if (node.getAttribute('id')) {\n          var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n          var label = document.querySelector('label[for=\"' + id + '\"]');\n          if (label) {\n            return !!axe.commons.text.accessibleText(label);\n          }\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "help-same-as-label",
   "enabled": false,
   "evaluate": "function evaluate(node, options) {\n        var labelText = axe.commons.text.label(node), check = node.getAttribute('title');\n        if (!labelText) {\n          return false;\n        }\n        if (!check) {\n          check = '';\n          if (node.getAttribute('aria-describedby')) {\n            var ref = axe.commons.dom.idrefs(node, 'aria-describedby');\n            check = ref.map(function(thing) {\n              return thing ? axe.commons.text.accessibleText(thing) : '';\n            }).join('');\n          }\n        }\n        return axe.commons.text.sanitize(check) === axe.commons.text.sanitize(labelText);\n      }"
  },
  {
   "id": "multiple-label",
   "evaluate": "function evaluate(node, options) {\n        var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n        var labels = Array.from(document.querySelectorAll('label[for=\"' + id + '\"]'));\n        var parent = node.parentNode;\n        if (labels.length) {\n          labels = labels.filter(function(label, index) {\n            if (index === 0 && !axe.commons.dom.isVisible(label, true) || axe.commons.dom.isVisible(label, true)) {\n              return label;\n            }\n          });\n        }\n        while (parent) {\n          if (parent.tagName === 'LABEL' && labels.indexOf(parent) === -1) {\n            labels.push(parent);\n          }\n          parent = parent.parentNode;\n        }\n        this.relatedNodes(labels);\n        return labels.length > 1;\n      }",
   "enabled": true
  },
  {
   "id": "has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        return axe.commons.text.accessibleText(node).length > 0;\n      }",
   "enabled": true
  },
  {
   "id": "exists",
   "evaluate": "function evaluate(node, options) {\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "caption-faked",
   "evaluate": "function evaluate(node, options) {\n        var table = axe.commons.table.toGrid(node);\n        var firstRow = table[0];\n        if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) {\n          return true;\n        }\n        return firstRow.reduce(function(out, curr, i) {\n          return out || curr !== firstRow[i + 1] && firstRow[i + 1] !== undefined;\n        }, false);\n      }",
   "enabled": true
  },
  {
   "id": "td-has-header",
   "evaluate": "function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var badCells = [];\n        var cells = tableUtils.getAllCells(node);\n        cells.forEach(function(cell) {\n          if (axe.commons.dom.hasContent(cell) && tableUtils.isDataCell(cell) && !axe.commons.aria.label(cell)) {\n            var hasHeaders = tableUtils.getHeaders(cell);\n            hasHeaders = hasHeaders.reduce(function(hasHeaders, header) {\n              return hasHeaders || header !== null && !!axe.commons.dom.hasContent(header);\n            }, false);\n            if (!hasHeaders) {\n              badCells.push(cell);\n            }\n          }\n        });\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "td-headers-attr",
   "evaluate": "function evaluate(node, options) {\n        var cells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          var row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cells.push(row.cells[cellIndex]);\n          }\n        }\n        var ids = cells.reduce(function(ids, cell) {\n          if (cell.getAttribute('id')) {\n            ids.push(cell.getAttribute('id'));\n          }\n          return ids;\n        }, []);\n        var badCells = cells.reduce(function(badCells, cell) {\n          var isSelf, notOfTable;\n          var headers = (cell.getAttribute('headers') || '').split(/\\s/).reduce(function(headers, header) {\n            header = header.trim();\n            if (header) {\n              headers.push(header);\n            }\n            return headers;\n          }, []);\n          if (headers.length !== 0) {\n            if (cell.getAttribute('id')) {\n              isSelf = headers.indexOf(cell.getAttribute('id').trim()) !== -1;\n            }\n            notOfTable = headers.reduce(function(fail, header) {\n              return fail || ids.indexOf(header) === -1;\n            }, false);\n            if (isSelf || notOfTable) {\n              badCells.push(cell);\n            }\n          }\n          return badCells;\n        }, []);\n        if (badCells.length > 0) {\n          this.relatedNodes(badCells);\n          return false;\n        } else {\n          return true;\n        }\n      }",
   "enabled": true
  },
  {
   "id": "th-has-data-cells",
   "evaluate": "function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var cells = tableUtils.getAllCells(node);\n        var checkResult = this;\n        var reffedHeaders = [];\n        cells.forEach(function(cell) {\n          var headers = cell.getAttribute('headers');\n          if (headers) {\n            reffedHeaders = reffedHeaders.concat(headers.split(/\\s+/));\n          }\n          var ariaLabel = cell.getAttribute('aria-labelledby');\n          if (ariaLabel) {\n            reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\\s+/));\n          }\n        });\n        var headers = cells.filter(function(cell) {\n          if (axe.commons.text.sanitize(cell.textContent) === '') {\n            return false;\n          }\n          return cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1;\n        });\n        var tableGrid = tableUtils.toGrid(node);\n        var out = headers.reduce(function(res, header) {\n          if (header.getAttribute('id') && reffedHeaders.includes(header.getAttribute('id'))) {\n            return !res ? res : true;\n          }\n          var hasCell = false;\n          var pos = tableUtils.getCellPosition(header, tableGrid);\n          if (tableUtils.isColumnHeader(header)) {\n            hasCell = tableUtils.traverse('down', pos, tableGrid).reduce(function(out, cell) {\n              return out || axe.commons.dom.hasContent(cell) && !tableUtils.isColumnHeader(cell);\n            }, false);\n          }\n          if (!hasCell && tableUtils.isRowHeader(header)) {\n            hasCell = tableUtils.traverse('right', pos, tableGrid).reduce(function(out, cell) {\n              return out || axe.commons.dom.hasContent(cell) && !tableUtils.isRowHeader(cell);\n            }, false);\n          }\n          if (!hasCell) {\n            checkResult.relatedNodes(header);\n          }\n          return res && hasCell;\n        }, true);\n        return out ? true : undefined;\n      }",
   "enabled": true
  },
  {
   "id": "description",
   "evaluate": "function evaluate(node, options) {\n        var tracks = node.querySelectorAll('track');\n        if (tracks.length) {\n          for (var i = 0; i < tracks.length; i++) {\n            var kind = tracks[i].getAttribute('kind');\n            if (kind && kind === 'descriptions') {\n              return false;\n            }\n          }\n          return true;\n        }\n        return undefined;\n      }",
   "enabled": true
  }
 ],
 "data": {
  "rules": {
   "area-alt": {
    "description": "Ensures <area> elements of image maps have alternate text",
    "help": "Active <area> elements must have alternate text",
    "mapping": {
     "ruleId": "010109-A",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Missing text equivalent for area."
    }
   },
   "audio-caption": {
    "description": "Ensures <audio> elements have captions",
    "help": "<audio> elements must have a captions track",
    "mapping": {
     "ruleId": "010402-D",
     "SC": "1.2.2",
     "weight": 0,
     "description": "Checks the use of all <audio> element to ensure that the element contains a <caption> element"
    }
   },
   "blink": {
    "description": "Ensures <blink> elements are not used",
    "help": "<blink> elements are deprecated and must not be used",
    "mapping": {
     "ruleId": "070201-A",
     "SC": "2.2.2",
     "weight": 0,
     "description": "Checks to make sure that the <blink> tag is never used"
    }
   },
   "button-name": {
    "description": "Ensures buttons have discernible text",
    "help": "Buttons must have discernible text",
    "mapping": {
     "ruleId": "SC412BTN",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Checks all <button> elements to ensure that they have a discernable accessible name"
    }
   },
   "bypass": {
    "description": "Ensures each page has at least one mechanism for a user to bypass navigation and jump straight to the content",
    "help": "Page must have means to bypass repeated blocks",
    "mapping": {
     "ruleId": "N130601-A",
     "SC": "2.4.1",
     "weight": 3,
     "description": "There is no mechanism to bypass navigation links."
    }
   },
   "frame-title": {
    "description": "Ensures <iframe> and <frame> elements contain a non-empty title attribute",
    "help": "Frames must have title attribute",
    "mapping": {
     "ruleId": "120101-A",
     "SC": "4.1.2",
     "weight": 2,
     "description": "Ensure that all iframe and frame elements contain a unique and non-empty title attribute"
    }
   },
   "image-alt": {
    "description": "Ensures <img> elements have alternate text or a role of none or presentation",
    "help": "Images must have alternate text",
    "mapping": {
     "ruleId": "IMG_NO_ALT",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <img> element has an alternative text or is marked as presentational"
    }
   },
   "input-image-alt": {
    "description": "Ensures <input type=\"image\"> elements have alternate text",
    "help": "Image buttons must have alternate text",
    "mapping": {
     "ruleId": "010103-A",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <input> that represents an image button has an accessible name"
    }
   },
   "label": {
    "description": "Ensures every form element has a label",
    "help": "Form elements must have labels",
    "mapping": {
     "ruleId": "120401-E",
     "SC": "1.3.1",
     "weight": 0,
     "description": "Ensures that every input element that requires a label, has an appropriate label"
    }
   },
   "link-name": {
    "description": "Ensures links have discernible text",
    "help": "Links must have discernible text",
    "mapping": {
     "ruleId": "SC412LNKN",
     "SC": "4.1.2",
     "weight": 1,
     "description": "Ensures that every link has an accessible name"
    }
   },
   "object-alt": {
    "description": "Ensures <object> elements have alternate text",
    "help": "<object> elements must have alternate text",
    "mapping": {
     "ruleId": "010105-A",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <object> element has a text alternative"
    }
   },
   "server-side-image-map": {
    "description": "Ensures that server-side image maps are not used",
    "help": "Server-side image maps must not be used",
    "mapping": {
     "ruleId": "090101-A",
     "SC": "2.1.1",
     "weight": 0,
     "description": "Ensures that server-side image maps are never used"
    }
   },
   "table-fake-caption": {
    "description": "Ensure that tables with a caption use the <caption> element.",
    "help": "Data or header cells should not be used to give caption to a data table.",
    "mapping": {}
   },
   "td-has-header": {
    "description": "Ensure that each non-empty data cell in a large table has one or more table headers",
    "help": "All non-empty td element in table larger than 3 by 3 must have an associated table header",
    "mapping": {}
   },
   "td-headers-attr": {
    "description": "Ensure that each cell in a table using the headers refers to another cell in that table",
    "help": "All cells in a table element that use the headers attribute must only refer to other cells of that same table"
   },
   "th-has-data-cells": {
    "description": "Ensure that each table header in a data table refers to data cells",
    "help": "All th elements and elements with role=columnheader/rowheader must have data cells they describe",
    "mapping": {}
   },
   "video-caption": {
    "description": "Ensures <video> elements have captions",
    "help": "<video> elements must have captions",
    "mapping": {
     "ruleId": "010402-D",
     "SC": "1.2.2",
     "weight": 1,
     "description": "Ensures that the HTML5 <video> tag is captioned"
    }
   },
   "video-description": {
    "description": "Ensures <video> elements have audio descriptions",
    "help": "<video> elements must have an audio description track",
    "mapping": {
     "ruleId": "010301-Q1",
     "SC": "1.2.5",
     "weight": 1,
     "description": "Ensures that every <video> tag has an audio description"
    }
   }
  },
  "checks": {
   "non-empty-alt": {
    "impact": "critical"
   },
   "non-empty-title": {
    "impact": "serious"
   },
   "aria-label": {
    "impact": "serious"
   },
   "aria-labelledby": {
    "impact": "serious"
   },
   "caption": {
    "impact": "critical"
   },
   "is-on-screen": {
    "impact": "serious"
   },
   "non-empty-if-present": {
    "impact": "critical"
   },
   "non-empty-value": {
    "impact": "critical"
   },
   "button-has-visible-text": {
    "impact": "critical"
   },
   "role-presentation": {
    "impact": "minor"
   },
   "role-none": {
    "impact": "minor"
   },
   "focusable-no-name": {
    "impact": "serious"
   },
   "internal-link-present": {
    "impact": "serious"
   },
   "header-present": {
    "impact": "serious"
   },
   "landmark": {
    "impact": "serious"
   },
   "has-alt": {
    "impact": "critical"
   },
   "implicit-label": {
    "impact": "critical"
   },
   "explicit-label": {
    "impact": "critical"
   },
   "help-same-as-label": {
    "impact": "minor"
   },
   "multiple-label": {
    "impact": "serious"
   },
   "has-visible-text": {
    "impact": "minor"
   },
   "exists": {
    "impact": "minor"
   },
   "caption-faked": {
    "impact": "serious"
   },
   "td-has-header": {
    "impact": "critical"
   },
   "td-headers-attr": {
    "impact": "serious"
   },
   "th-has-data-cells": {
    "impact": "serious"
   },
   "description": {
    "impact": "critical"
   }
  }
 }
};