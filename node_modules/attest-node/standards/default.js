module.exports = {
 "rules": [
  {
   "id": "accesskeys",
   "selector": "[accesskey]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "accesskeys"
   ],
   "tags": [
    "wcag2a",
    "wcag211",
    "cat.keyboard"
   ]
  },
  {
   "id": "area-alt",
   "selector": "map area[href]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt",
    "non-empty-title",
    "aria-label",
    "aria-labelledby"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "aria-allowed-attr",
   "selector": "*",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-allowed-attr"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag411",
    "wcag412"
   ],
   "matches": "function matches(node) {\n        var role = node.getAttribute('role');\n        if (!role) {\n          role = axe.commons.aria.implicitRole(node);\n        }\n        var allowed = axe.commons.aria.allowedAttr(role);\n        if (role && allowed) {\n          var aria = /^aria-/;\n          if (node.hasAttributes()) {\n            var attrs = node.attributes;\n            for (var i = 0, l = attrs.length; i < l; i++) {\n              if (aria.test(attrs[i].name)) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n      }"
  },
  {
   "id": "aria-hidden-body",
   "selector": "body",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-hidden-body"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag412"
   ]
  },
  {
   "id": "aria-required-attr",
   "selector": "[role]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-required-attr"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag411",
    "wcag412"
   ]
  },
  {
   "id": "aria-required-children",
   "selector": "[role]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-required-children"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "aria-required-parent",
   "selector": "[role]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-required-parent"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "aria-roles",
   "selector": "[role]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "invalidrole",
    "abstractrole"
   ],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag131",
    "wcag411",
    "wcag412"
   ]
  },
  {
   "id": "aria-valid-attr-value",
   "selector": "*",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    {
     "options": [],
     "id": "aria-valid-attr-value"
    },
    "aria-errormessage"
   ],
   "none": [],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag131",
    "wcag411",
    "wcag412"
   ],
   "matches": "function matches(node) {\n        var aria = /^aria-/;\n        if (node.hasAttributes()) {\n          var attrs = node.attributes;\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            if (aria.test(attrs[i].name)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }"
  },
  {
   "id": "aria-valid-attr",
   "selector": "*",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    {
     "options": [],
     "id": "aria-valid-attr"
    }
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.aria",
    "wcag2a",
    "wcag411"
   ],
   "matches": "function matches(node) {\n        var aria = /^aria-/;\n        if (node.hasAttributes()) {\n          var attrs = node.attributes;\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            if (aria.test(attrs[i].name)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }"
  },
  {
   "id": "audio-caption",
   "selector": "audio",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "caption"
   ],
   "tags": [
    "cat.time-and-media",
    "wcag2a",
    "wcag122",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "blink",
   "selector": "blink",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "is-on-screen"
   ],
   "tags": [
    "cat.time-and-media",
    "wcag2a",
    "wcag222",
    "section508",
    "section508.22.j"
   ]
  },
  {
   "id": "button-name",
   "selector": "button, [role=\"button\"], input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-if-present",
    "non-empty-value",
    "button-has-visible-text",
    "aria-label",
    "aria-labelledby",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "cat.name-role-value",
    "wcag2a",
    "wcag412",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "bypass",
   "selector": "html",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": true,
   "any": [
    "internal-link-present",
    "header-present",
    "landmark"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.keyboard",
    "wcag2a",
    "wcag241",
    "section508",
    "section508.22.o"
   ],
   "matches": "function matches(node) {\n        return !!node.querySelector('a[href]');\n      }"
  },
  {
   "id": "color-contrast",
   "selector": "*",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "color-contrast"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.color",
    "wcag2aa",
    "wcag143"
   ],
   "matches": "function matches(node) {\n        var nodeName = node.nodeName.toUpperCase(), nodeType = node.type, doc = document;\n        if (node.getAttribute('aria-disabled') === 'true' || axe.commons.dom.findUp(node, '[aria-disabled=\"true\"]')) {\n          return false;\n        }\n        if (nodeName === 'INPUT') {\n          return [ 'hidden', 'range', 'color', 'checkbox', 'radio', 'image' ].indexOf(nodeType) === -1 && !node.disabled;\n        }\n        if (nodeName === 'SELECT') {\n          return !!node.options.length && !node.disabled;\n        }\n        if (nodeName === 'TEXTAREA') {\n          return !node.disabled;\n        }\n        if (nodeName === 'OPTION') {\n          return false;\n        }\n        if (nodeName === 'BUTTON' && node.disabled || axe.commons.dom.findUp(node, 'button[disabled]')) {\n          return false;\n        }\n        if (nodeName === 'FIELDSET' && node.disabled || axe.commons.dom.findUp(node, 'fieldset[disabled]')) {\n          return false;\n        }\n        var nodeParentLabel = axe.commons.dom.findUp(node, 'label');\n        if (nodeName === 'LABEL' || nodeParentLabel) {\n          var relevantNode = node;\n          if (nodeParentLabel) {\n            relevantNode = nodeParentLabel;\n          }\n          var candidate = relevantNode.htmlFor && doc.getElementById(relevantNode.htmlFor);\n          if (candidate && candidate.disabled) {\n            return false;\n          }\n          var candidate = relevantNode.querySelector('input:not([type=\"hidden\"]):not([type=\"image\"])' + ':not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]), select, textarea');\n          if (candidate && candidate.disabled) {\n            return false;\n          }\n        }\n        if (node.getAttribute('id')) {\n          var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n          var _candidate = doc.querySelector('[aria-labelledby~=\"' + id + '\"]');\n          if (_candidate && _candidate.hasAttribute('disabled')) {\n            return false;\n          }\n        }\n        if (axe.commons.text.visible(node, false, true) === '') {\n          return false;\n        }\n        var range = document.createRange(), childNodes = node.childNodes, length = childNodes.length, child, index;\n        for (index = 0; index < length; index++) {\n          child = childNodes[index];\n          if (child.nodeType === 3 && axe.commons.text.sanitize(child.nodeValue) !== '') {\n            range.selectNodeContents(child);\n          }\n        }\n        var rects = range.getClientRects();\n        length = rects.length;\n        for (index = 0; index < length; index++) {\n          if (axe.commons.dom.visuallyOverlaps(rects[index], node)) {\n            return true;\n          }\n        }\n        return false;\n      }"
  },
  {
   "id": "definition-list",
   "selector": "dl:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "structured-dlitems",
    "only-dlitems"
   ],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "dlitem",
   "selector": "dd:not([role]), dt:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "dlitem"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "document-title",
   "selector": "html",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "doc-has-title"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag242"
   ],
   "matches": "function matches(node) {\n        return node.ownerDocument.defaultView.self === node.ownerDocument.defaultView.top;\n      }"
  },
  {
   "id": "duplicate-id",
   "selector": "[id]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "duplicate-id"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.parsing",
    "wcag2a",
    "wcag411"
   ]
  },
  {
   "id": "frame-title",
   "selector": "frame, iframe",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-label",
    "aria-labelledby",
    "non-empty-title",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag241",
    "section508",
    "section508.22.i"
   ]
  },
  {
   "id": "html-has-lang",
   "selector": "html",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-lang"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.language",
    "wcag2a",
    "wcag311"
   ]
  },
  {
   "id": "html-lang-valid",
   "selector": "html[lang]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "valid-lang"
   ],
   "tags": [
    "cat.language",
    "wcag2a",
    "wcag311"
   ]
  },
  {
   "id": "image-alt",
   "selector": "img, [role='img']",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-alt",
    "aria-label",
    "aria-labelledby",
    "non-empty-title",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "input-image-alt",
   "selector": "input[type=\"image\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt",
    "aria-label",
    "aria-labelledby",
    "non-empty-title"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "label",
   "selector": "input:not([type='hidden']):not([type='image']):not([type='button']):not([type='submit']):not([type='reset']), select, textarea",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "aria-label",
    "aria-labelledby",
    "implicit-label",
    "explicit-label",
    "non-empty-title"
   ],
   "all": [],
   "none": [
    "help-same-as-label",
    "multiple-label"
   ],
   "tags": [
    "cat.forms",
    "wcag2a",
    "wcag332",
    "wcag131",
    "section508",
    "section508.22.n"
   ]
  },
  {
   "id": "layout-table",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "has-th",
    "has-caption",
    "has-summary"
   ],
   "tags": [
    "cat.semantics",
    "wcag2a",
    "wcag131"
   ],
   "matches": "function matches(node) {\n        return !axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "link-in-text-block",
   "selector": "a[href]:not([role]), *[role=link]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "link-in-text-block"
   ],
   "none": [],
   "tags": [
    "cat.color",
    "experimental",
    "wcag2a",
    "wcag141"
   ],
   "matches": "function matches(node) {\n        var text = axe.commons.text.sanitize(node.textContent);\n        if (!text) {\n          return false;\n        }\n        if (!axe.commons.dom.isVisible(node, false)) {\n          return false;\n        }\n        return axe.commons.dom.isInTextBlock(node);\n      }"
  },
  {
   "id": "link-name",
   "selector": "a[href]:not([role=\"button\"]), [role=link][href]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-visible-text",
    "aria-label",
    "aria-labelledby",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "cat.name-role-value",
    "wcag2a",
    "wcag111",
    "wcag412",
    "wcag244",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "list",
   "selector": "ul:not([role]), ol:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "only-listitems"
   ],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "listitem",
   "selector": "li:not([role])",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "listitem"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.structure",
    "wcag2a",
    "wcag131"
   ]
  },
  {
   "id": "marquee",
   "selector": "marquee",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "is-on-screen"
   ],
   "tags": [
    "cat.parsing",
    "wcag2a",
    "wcag222"
   ]
  },
  {
   "id": "meta-refresh",
   "selector": "meta[http-equiv=\"refresh\"]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "meta-refresh"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.time",
    "wcag2a",
    "wcag2aaa",
    "wcag221",
    "wcag224",
    "wcag325"
   ]
  },
  {
   "id": "meta-viewport",
   "selector": "meta[name=\"viewport\"]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    {
     "options": {
      "scaleMinimum": 2
     },
     "id": "meta-viewport"
    }
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.sensory-and-visual-cues",
    "wcag2aa",
    "wcag144"
   ]
  },
  {
   "id": "object-alt",
   "selector": "object",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-visible-text",
    "aria-label",
    "aria-labelledby",
    "non-empty-title"
   ],
   "all": [],
   "none": [],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "p-as-heading",
   "selector": "p",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    {
     "options": {
      "margins": [
       {
        "weight": 150,
        "italic": true
       },
       {
        "weight": 150,
        "size": 1.15
       },
       {
        "italic": true,
        "size": 1.15
       },
       {
        "size": 1.4
       }
      ]
     },
     "id": "p-as-heading"
    }
   ],
   "none": [],
   "tags": [
    "cat.semantics",
    "wcag2a",
    "wcag131",
    "experimental"
   ],
   "matches": "function matches(node) {\n        var children = Array.from(node.parentNode.childNodes);\n        var nodeText = node.textContent.trim();\n        var isSentence = /[.!?:;](?![.!?:;])/g;\n        if (nodeText.length === 0 || (nodeText.match(isSentence) || []).length >= 2) {\n          return false;\n        }\n        var siblingsAfter = children.slice(children.indexOf(node) + 1).filter(function(elm) {\n          return elm.nodeName.toUpperCase() === 'P' && elm.textContent.trim() !== '';\n        });\n        return siblingsAfter.length !== 0;\n      }"
  },
  {
   "id": "server-side-image-map",
   "selector": "img[ismap]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "exists"
   ],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag211",
    "section508",
    "section508.22.f"
   ]
  },
  {
   "id": "table-fake-caption",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "caption-faked"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "experimental",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "td-has-header",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "td-has-header"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "experimental",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        if (axe.commons.table.isDataTable(node)) {\n          var tableArray = axe.commons.table.toArray(node);\n          return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;\n        }\n        return false;\n      }"
  },
  {
   "id": "td-headers-attr",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "td-headers-attr"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ]
  },
  {
   "id": "th-has-data-cells",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "th-has-data-cells"
   ],
   "none": [],
   "tags": [
    "cat.tables",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "valid-lang",
   "selector": "[lang]:not(html), [xml\\:lang]:not(html)",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "valid-lang"
   ],
   "tags": [
    "cat.language",
    "wcag2aa",
    "wcag312"
   ]
  },
  {
   "id": "video-caption",
   "selector": "video",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "caption"
   ],
   "tags": [
    "cat.text-alternatives",
    "wcag2a",
    "wcag122",
    "wcag123",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "video-description",
   "selector": "video",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "description"
   ],
   "tags": [
    "cat.text-alternatives",
    "wcag2aa",
    "wcag125",
    "section508",
    "section508.22.b"
   ]
  },
  {
   "id": "checkboxgroup",
   "enabled": false
  },
  {
   "id": "empty-heading",
   "enabled": false
  },
  {
   "id": "frame-title-unique",
   "enabled": false
  },
  {
   "id": "heading-order",
   "enabled": false
  },
  {
   "id": "hidden-content",
   "enabled": false
  },
  {
   "id": "href-no-hash",
   "enabled": false
  },
  {
   "id": "image-redundant-alt",
   "enabled": false
  },
  {
   "id": "label-title-only",
   "enabled": false
  },
  {
   "id": "landmark-main-is-top-level",
   "enabled": false
  },
  {
   "id": "landmark-one-main",
   "enabled": false
  },
  {
   "id": "meta-viewport-large",
   "enabled": false
  },
  {
   "id": "radiogroup",
   "enabled": false
  },
  {
   "id": "region",
   "enabled": false
  },
  {
   "id": "scope-attr-valid",
   "enabled": false
  },
  {
   "id": "skip-link",
   "enabled": false
  },
  {
   "id": "tabindex",
   "enabled": false
  },
  {
   "id": "table-duplicate-name",
   "enabled": false
  }
 ],
 "checks": [
  {
   "id": "accesskeys",
   "evaluate": "function evaluate(node, options) {\n        if (axe.commons.dom.isVisible(node, false)) {\n          this.data(node.getAttribute('accesskey'));\n          this.relatedNodes([ node ]);\n        }\n        return true;\n      }",
   "after": "function after(results, options) {\n        var seen = {};\n        return results.filter(function(r) {\n          if (!r.data) {\n            return false;\n          }\n          var key = r.data.toUpperCase();\n          if (!seen[key]) {\n            seen[key] = r;\n            r.relatedNodes = [];\n            return true;\n          }\n          seen[key].relatedNodes.push(r.relatedNodes[0]);\n          return false;\n        }).map(function(r) {\n          r.result = !!r.relatedNodes.length;\n          return r;\n        });\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-alt",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('alt');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-title",
   "evaluate": "function evaluate(node, options) {\n        var title = node.getAttribute('title');\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-label",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('aria-label');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-labelledby",
   "evaluate": "function evaluate(node, options) {\n        var getIdRefs = axe.commons.dom.idrefs;\n        return getIdRefs(node, 'aria-labelledby').some(function(elm) {\n          return elm && axe.commons.text.accessibleText(elm, true);\n        });\n      }",
   "enabled": true
  },
  {
   "id": "aria-allowed-attr",
   "evaluate": "function evaluate(node, options) {\n        var invalid = [];\n        var attr, attrName, allowed, role = node.getAttribute('role'), attrs = node.attributes;\n        if (!role) {\n          role = axe.commons.aria.implicitRole(node);\n        }\n        allowed = axe.commons.aria.allowedAttr(role);\n        if (role && allowed) {\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            attr = attrs[i];\n            attrName = attr.name;\n            if (axe.commons.aria.validateAttr(attrName) && allowed.indexOf(attrName) === -1) {\n              invalid.push(attrName + '=\"' + attr.nodeValue + '\"');\n            }\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "aria-hidden-body",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('aria-hidden') !== 'true';\n      }",
   "enabled": true
  },
  {
   "id": "aria-required-attr",
   "evaluate": "function evaluate(node, options) {\n        var missing = [];\n        if (node.hasAttributes()) {\n          var attr, role = node.getAttribute('role'), required = axe.commons.aria.requiredAttr(role);\n          if (role && required) {\n            for (var i = 0, l = required.length; i < l; i++) {\n              attr = required[i];\n              if (!node.getAttribute(attr)) {\n                missing.push(attr);\n              }\n            }\n          }\n        }\n        if (missing.length) {\n          this.data(missing);\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "aria-required-children",
   "evaluate": "function evaluate(node, options) {\n        var requiredOwned = axe.commons.aria.requiredOwned, implicitNodes = axe.commons.aria.implicitNodes, matchesSelector = axe.commons.utils.matchesSelector, idrefs = axe.commons.dom.idrefs;\n        function owns(node, role, ariaOwned) {\n          if (node === null) {\n            return false;\n          }\n          var implicit = implicitNodes(role), selector = [ '[role=\"' + role + '\"]' ];\n          if (implicit) {\n            selector = selector.concat(implicit);\n          }\n          selector = selector.join(',');\n          return ariaOwned ? matchesSelector(node, selector) || !!node.querySelector(selector) : !!node.querySelector(selector);\n        }\n        function ariaOwns(nodes, role) {\n          var index, length;\n          for (index = 0, length = nodes.length; index < length; index++) {\n            if (nodes[index] === null) {\n              continue;\n            }\n            if (owns(nodes[index], role, true)) {\n              return true;\n            }\n          }\n          return false;\n        }\n        function missingRequiredChildren(node, childRoles, all, role) {\n          var i, l = childRoles.length, missing = [], ownedElements = idrefs(node, 'aria-owns');\n          for (i = 0; i < l; i++) {\n            var r = childRoles[i];\n            if (owns(node, r) || ariaOwns(ownedElements, r)) {\n              if (!all) {\n                return null;\n              }\n            } else {\n              if (all) {\n                missing.push(r);\n              }\n            }\n          }\n          if (role === 'combobox') {\n            var textboxIndex = missing.indexOf('textbox');\n            var textTypeInputs = [ 'text', 'search', 'email', 'url', 'tel' ];\n            if (textboxIndex >= 0 && node.tagName === 'INPUT' && textTypeInputs.includes(node.type)) {\n              missing.splice(textboxIndex, 1);\n            }\n            var listboxIndex = missing.indexOf('listbox');\n            var expanded = node.getAttribute('aria-expanded');\n            if (listboxIndex >= 0 && (!expanded || expanded === 'false')) {\n              missing.splice(listboxIndex, 1);\n            }\n          }\n          if (missing.length) {\n            return missing;\n          }\n          if (!all && childRoles.length) {\n            return childRoles;\n          }\n          return null;\n        }\n        var role = node.getAttribute('role');\n        var required = requiredOwned(role);\n        if (!required) {\n          return true;\n        }\n        var all = false;\n        var childRoles = required.one;\n        if (!childRoles) {\n          var all = true;\n          childRoles = required.all;\n        }\n        var missing = missingRequiredChildren(node, childRoles, all, role);\n        if (!missing) {\n          return true;\n        }\n        this.data(missing);\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "aria-required-parent",
   "evaluate": "function evaluate(node, options) {\n        function getSelector(role) {\n          var impliedNative = axe.commons.aria.implicitNodes(role) || [];\n          return impliedNative.concat('[role=\"' + role + '\"]').join(',');\n        }\n        function getMissingContext(element, requiredContext, includeElement) {\n          var index, length, role = element.getAttribute('role'), missing = [];\n          if (!requiredContext) {\n            requiredContext = axe.commons.aria.requiredContext(role);\n          }\n          if (!requiredContext) {\n            return null;\n          }\n          for (index = 0, length = requiredContext.length; index < length; index++) {\n            if (includeElement && axe.utils.matchesSelector(element, getSelector(requiredContext[index]))) {\n              return null;\n            }\n            if (axe.commons.dom.findUp(element, getSelector(requiredContext[index]))) {\n              return null;\n            } else {\n              missing.push(requiredContext[index]);\n            }\n          }\n          return missing;\n        }\n        function getAriaOwners(element) {\n          var owners = [], o = null;\n          while (element) {\n            if (element.getAttribute('id')) {\n              var id = axe.commons.utils.escapeSelector(element.getAttribute('id'));\n              o = document.querySelector('[aria-owns~=' + id + ']');\n              if (o) {\n                owners.push(o);\n              }\n            }\n            element = element.parentElement;\n          }\n          return owners.length ? owners : null;\n        }\n        var missingParents = getMissingContext(node);\n        if (!missingParents) {\n          return true;\n        }\n        var owners = getAriaOwners(node);\n        if (owners) {\n          for (var i = 0, l = owners.length; i < l; i++) {\n            missingParents = getMissingContext(owners[i], missingParents, true);\n            if (!missingParents) {\n              return true;\n            }\n          }\n        }\n        this.data(missingParents);\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "invalidrole",
   "evaluate": "function evaluate(node, options) {\n        return !axe.commons.aria.isValidRole(node.getAttribute('role'));\n      }",
   "enabled": true
  },
  {
   "id": "abstractrole",
   "evaluate": "function evaluate(node, options) {\n        return axe.commons.aria.getRoleType(node.getAttribute('role')) === 'abstract';\n      }",
   "enabled": true
  },
  {
   "id": "aria-valid-attr-value",
   "options": [],
   "evaluate": "function evaluate(node, options) {\n        options = Array.isArray(options) ? options : [];\n        var invalid = [], aria = /^aria-/;\n        var attr, attrName, attrs = node.attributes;\n        var skipAttrs = [ 'aria-errormessage' ];\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          attr = attrs[i];\n          attrName = attr.name;\n          if (!skipAttrs.includes(attrName)) {\n            if (options.indexOf(attrName) === -1 && aria.test(attrName) && !axe.commons.aria.validateAttrValue(node, attrName)) {\n              invalid.push(attrName + '=\"' + attr.nodeValue + '\"');\n            }\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "aria-errormessage",
   "evaluate": "function evaluate(node, options) {\n        options = Array.isArray(options) ? options : [];\n        var attr = node.getAttribute('aria-errormessage'), hasAttr = node.hasAttribute('aria-errormessage');\n        var doc = document;\n        function validateAttrValue() {\n          var idref = attr && doc.getElementById(attr);\n          if (idref) {\n            return idref.getAttribute('role') === 'alert' || idref.getAttribute('aria-live') === 'assertive' || axe.utils.tokenList(node.getAttribute('aria-describedby') || '').indexOf(attr) > -1;\n          }\n        }\n        if (options.indexOf(attr) === -1 && hasAttr) {\n          if (!validateAttrValue()) {\n            this.data(attr);\n            return false;\n          }\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "aria-valid-attr",
   "options": [],
   "evaluate": "function evaluate(node, options) {\n        options = Array.isArray(options) ? options : [];\n        var invalid = [], aria = /^aria-/;\n        var attr, attrs = node.attributes;\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          attr = attrs[i].name;\n          if (options.indexOf(attr) === -1 && aria.test(attr) && !axe.commons.aria.validateAttr(attr)) {\n            invalid.push(attr);\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "caption",
   "evaluate": "function evaluate(node, options) {\n        var tracks = node.querySelectorAll('track');\n        if (tracks.length) {\n          for (var i = 0; i < tracks.length; i++) {\n            var kind = tracks[i].getAttribute('kind');\n            if (kind && kind === 'captions') {\n              return false;\n            }\n          }\n          return true;\n        }\n        return undefined;\n      }",
   "enabled": true
  },
  {
   "id": "is-on-screen",
   "evaluate": "function evaluate(node, options) {\n        return axe.commons.dom.isVisible(node, false) && !axe.commons.dom.isOffscreen(node);\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-if-present",
   "evaluate": "function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var type = (node.getAttribute('type') || '').toLowerCase();\n        var label = node.getAttribute('value');\n        this.data(label);\n        if (nodeName === 'INPUT' && [ 'submit', 'reset' ].indexOf(type) !== -1) {\n          return label === null;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-value",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('value');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "button-has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var role = node.getAttribute('role');\n        var label = void 0;\n        if (nodeName === 'BUTTON' || role === 'button' && nodeName !== 'INPUT') {\n          label = axe.commons.text.accessibleText(node);\n          this.data(label);\n          return !!label;\n        } else {\n          return false;\n        }\n      }",
   "enabled": true
  },
  {
   "id": "role-presentation",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'presentation';\n      }",
   "enabled": true
  },
  {
   "id": "role-none",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'none';\n      }",
   "enabled": true
  },
  {
   "id": "focusable-no-name",
   "evaluate": "function evaluate(node, options) {\n        var tabIndex = node.getAttribute('tabindex'), isFocusable = axe.commons.dom.isFocusable(node) && tabIndex > -1;\n        if (!isFocusable) {\n          return false;\n        }\n        return !axe.commons.text.accessibleText(node);\n      }",
   "enabled": true
  },
  {
   "id": "internal-link-present",
   "evaluate": "function evaluate(node, options) {\n        return !!node.querySelector('a[href^=\"#\"]');\n      }",
   "enabled": true
  },
  {
   "id": "header-present",
   "evaluate": "function evaluate(node, options) {\n        return !!node.querySelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n      }",
   "enabled": true
  },
  {
   "id": "landmark",
   "evaluate": "function evaluate(node, options) {\n        return node.getElementsByTagName('main').length > 0 || !!node.querySelector('[role=\"main\"]');\n      }",
   "enabled": true
  },
  {
   "id": "color-contrast",
   "evaluate": "function evaluate(node, options) {\n        if (!axe.commons.dom.isVisible(node, false)) {\n          return true;\n        }\n        var noScroll = !!(options || {}).noScroll;\n        var bgNodes = [], bgColor = axe.commons.color.getBackgroundColor(node, bgNodes, noScroll), fgColor = axe.commons.color.getForegroundColor(node, noScroll);\n        var nodeStyle = window.getComputedStyle(node);\n        var fontSize = parseFloat(nodeStyle.getPropertyValue('font-size'));\n        var fontWeight = nodeStyle.getPropertyValue('font-weight');\n        var bold = [ 'bold', 'bolder', '600', '700', '800', '900' ].indexOf(fontWeight) !== -1;\n        var cr = axe.commons.color.hasValidContrastRatio(bgColor, fgColor, fontSize, bold);\n        var truncatedResult = Math.floor(cr.contrastRatio * 100) / 100;\n        var missing;\n        if (bgColor === null) {\n          missing = axe.commons.color.incompleteData.get('bgColor');\n        }\n        var equalRatio = false;\n        if (truncatedResult === 1) {\n          equalRatio = true;\n          missing = axe.commons.color.incompleteData.set('bgColor', 'equalRatio');\n        }\n        var data = {\n          fgColor: fgColor ? fgColor.toHexString() : undefined,\n          bgColor: bgColor ? bgColor.toHexString() : undefined,\n          contrastRatio: cr ? truncatedResult : undefined,\n          fontSize: (fontSize * 72 / 96).toFixed(1) + 'pt',\n          fontWeight: bold ? 'bold' : 'normal',\n          missingData: missing,\n          expectedContrastRatio: cr.expectedContrastRatio + ':1'\n        };\n        this.data(data);\n        if (fgColor === null || bgColor === null || equalRatio) {\n          missing = null;\n          axe.commons.color.incompleteData.clear();\n          this.relatedNodes(bgNodes);\n          return undefined;\n        } else if (!cr.isValid) {\n          this.relatedNodes(bgNodes);\n        }\n        return cr.isValid;\n      }",
   "enabled": true
  },
  {
   "id": "structured-dlitems",
   "evaluate": "function evaluate(node, options) {\n        var children = node.children;\n        if (!children || !children.length) {\n          return false;\n        }\n        var hasDt = false, hasDd = false, nodeName;\n        for (var i = 0; i < children.length; i++) {\n          nodeName = children[i].nodeName.toUpperCase();\n          if (nodeName === 'DT') {\n            hasDt = true;\n          }\n          if (hasDt && nodeName === 'DD') {\n            return false;\n          }\n          if (nodeName === 'DD') {\n            hasDd = true;\n          }\n        }\n        return hasDt || hasDd;\n      }",
   "enabled": true
  },
  {
   "id": "only-dlitems",
   "evaluate": "function evaluate(node, options) {\n        var child, nodeName, bad = [], children = node.childNodes, permitted = [ 'STYLE', 'META', 'LINK', 'MAP', 'AREA', 'SCRIPT', 'DATALIST', 'TEMPLATE' ], hasNonEmptyTextNode = false;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          var nodeName = child.nodeName.toUpperCase();\n          if (child.nodeType === 1 && nodeName !== 'DT' && nodeName !== 'DD' && permitted.indexOf(nodeName) === -1) {\n            bad.push(child);\n          } else if (child.nodeType === 3 && child.nodeValue.trim() !== '') {\n            hasNonEmptyTextNode = true;\n          }\n        }\n        if (bad.length) {\n          this.relatedNodes(bad);\n        }\n        var retVal = !!bad.length || hasNonEmptyTextNode;\n        return retVal;\n      }",
   "enabled": true
  },
  {
   "id": "dlitem",
   "evaluate": "function evaluate(node, options) {\n        return node.parentNode.tagName.toUpperCase() === 'DL';\n      }",
   "enabled": true
  },
  {
   "id": "doc-has-title",
   "evaluate": "function evaluate(node, options) {\n        var title = document.title;\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "duplicate-id",
   "evaluate": "function evaluate(node, options) {\n        if (!node.getAttribute('id').trim()) {\n          return true;\n        }\n        var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n        var matchingNodes = document.querySelectorAll('[id=\"' + id + '\"]');\n        var related = [];\n        for (var i = 0; i < matchingNodes.length; i++) {\n          if (matchingNodes[i] !== node) {\n            related.push(matchingNodes[i]);\n          }\n        }\n        if (related.length) {\n          this.relatedNodes(related);\n        }\n        this.data(node.getAttribute('id'));\n        return matchingNodes.length <= 1;\n      }",
   "after": "function after(results, options) {\n        var uniqueIds = [];\n        return results.filter(function(r) {\n          if (uniqueIds.indexOf(r.data) === -1) {\n            uniqueIds.push(r.data);\n            return true;\n          }\n          return false;\n        });\n      }",
   "enabled": true
  },
  {
   "id": "has-lang",
   "evaluate": "function evaluate(node, options) {\n        return !!(node.getAttribute('lang') || node.getAttribute('xml:lang') || '').trim();\n      }",
   "enabled": true
  },
  {
   "id": "valid-lang",
   "evaluate": "function evaluate(node, options) {\n        function getBaseLang(lang) {\n          return lang.trim().split('-')[0].toLowerCase();\n        }\n        var langs, invalid;\n        langs = (options ? options : axe.commons.utils.validLangs()).map(getBaseLang);\n        invalid = [ 'lang', 'xml:lang' ].reduce(function(invalid, langAttr) {\n          var langVal = node.getAttribute(langAttr);\n          if (typeof langVal !== 'string') {\n            return invalid;\n          }\n          var baselangVal = getBaseLang(langVal);\n          if (baselangVal !== '' && langs.indexOf(baselangVal) === -1) {\n            invalid.push(langAttr + '=\"' + node.getAttribute(langAttr) + '\"');\n          }\n          return invalid;\n        }, []);\n        if (invalid.length) {\n          this.data(invalid);\n          return true;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "has-alt",
   "evaluate": "function evaluate(node, options) {\n        var nn = node.nodeName.toLowerCase();\n        return node.hasAttribute('alt') && (nn === 'img' || nn === 'input' || nn === 'area');\n      }",
   "enabled": true
  },
  {
   "id": "implicit-label",
   "evaluate": "function evaluate(node, options) {\n        var label = axe.commons.dom.findUp(node, 'label');\n        if (label) {\n          return !!axe.commons.text.accessibleText(label);\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "explicit-label",
   "evaluate": "function evaluate(node, options) {\n        if (node.getAttribute('id')) {\n          var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n          var label = document.querySelector('label[for=\"' + id + '\"]');\n          if (label) {\n            return !!axe.commons.text.accessibleText(label);\n          }\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "help-same-as-label",
   "enabled": false,
   "evaluate": "function evaluate(node, options) {\n        var labelText = axe.commons.text.label(node), check = node.getAttribute('title');\n        if (!labelText) {\n          return false;\n        }\n        if (!check) {\n          check = '';\n          if (node.getAttribute('aria-describedby')) {\n            var ref = axe.commons.dom.idrefs(node, 'aria-describedby');\n            check = ref.map(function(thing) {\n              return thing ? axe.commons.text.accessibleText(thing) : '';\n            }).join('');\n          }\n        }\n        return axe.commons.text.sanitize(check) === axe.commons.text.sanitize(labelText);\n      }"
  },
  {
   "id": "multiple-label",
   "evaluate": "function evaluate(node, options) {\n        var id = axe.commons.utils.escapeSelector(node.getAttribute('id'));\n        var labels = Array.from(document.querySelectorAll('label[for=\"' + id + '\"]'));\n        var parent = node.parentNode;\n        if (labels.length) {\n          labels = labels.filter(function(label, index) {\n            if (index === 0 && !axe.commons.dom.isVisible(label, true) || axe.commons.dom.isVisible(label, true)) {\n              return label;\n            }\n          });\n        }\n        while (parent) {\n          if (parent.tagName === 'LABEL' && labels.indexOf(parent) === -1) {\n            labels.push(parent);\n          }\n          parent = parent.parentNode;\n        }\n        this.relatedNodes(labels);\n        return labels.length > 1;\n      }",
   "enabled": true
  },
  {
   "id": "has-th",
   "evaluate": "function evaluate(node, options) {\n        var row, cell, badCells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cell = row.cells[cellIndex];\n            if (cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1) {\n              badCells.push(cell);\n            }\n          }\n        }\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return true;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "has-caption",
   "evaluate": "function evaluate(node, options) {\n        return !!node.caption;\n      }",
   "enabled": true
  },
  {
   "id": "has-summary",
   "evaluate": "function evaluate(node, options) {\n        return !!node.summary;\n      }",
   "enabled": true
  },
  {
   "id": "link-in-text-block",
   "evaluate": "function evaluate(node, options) {\n        var color = axe.commons.color;\n        function getContrast(color1, color2) {\n          var c1lum = color1.getRelativeLuminance();\n          var c2lum = color2.getRelativeLuminance();\n          return (Math.max(c1lum, c2lum) + .05) / (Math.min(c1lum, c2lum) + .05);\n        }\n        var blockLike = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n        function isBlock(elm) {\n          var display = window.getComputedStyle(elm).getPropertyValue('display');\n          return blockLike.indexOf(display) !== -1 || display.substr(0, 6) === 'table-';\n        }\n        if (isBlock(node)) {\n          return false;\n        }\n        var parentBlock = node.parentNode;\n        while (parentBlock.nodeType === 1 && !isBlock(parentBlock)) {\n          parentBlock = parentBlock.parentNode;\n        }\n        this.relatedNodes([ parentBlock ]);\n        if (color.elementIsDistinct(node, parentBlock)) {\n          return true;\n        } else {\n          var nodeColor, parentColor;\n          nodeColor = color.getForegroundColor(node);\n          parentColor = color.getForegroundColor(parentBlock);\n          if (!nodeColor || !parentColor) {\n            return undefined;\n          }\n          var contrast = getContrast(nodeColor, parentColor);\n          if (contrast === 1) {\n            return true;\n          } else if (contrast >= 3) {\n            axe.commons.color.incompleteData.set('fgColor', 'bgContrast');\n            this.data({\n              missingData: axe.commons.color.incompleteData.get('fgColor')\n            });\n            axe.commons.color.incompleteData.clear();\n            return undefined;\n          }\n          nodeColor = color.getBackgroundColor(node);\n          parentColor = color.getBackgroundColor(parentBlock);\n          if (!nodeColor || !parentColor || getContrast(nodeColor, parentColor) >= 3) {\n            var reason = void 0;\n            if (!nodeColor || !parentColor) {\n              reason = axe.commons.color.incompleteData.get('bgColor');\n            } else {\n              reason = 'bgContrast';\n            }\n            axe.commons.color.incompleteData.set('fgColor', reason);\n            this.data({\n              missingData: axe.commons.color.incompleteData.get('fgColor')\n            });\n            axe.commons.color.incompleteData.clear();\n            return undefined;\n          }\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        return axe.commons.text.accessibleText(node).length > 0;\n      }",
   "enabled": true
  },
  {
   "id": "only-listitems",
   "evaluate": "function evaluate(node, options) {\n        var child, nodeName, bad = [], children = node.childNodes, permitted = [ 'STYLE', 'META', 'LINK', 'MAP', 'AREA', 'SCRIPT', 'DATALIST', 'TEMPLATE' ], hasNonEmptyTextNode = false;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nodeName = child.nodeName.toUpperCase();\n          if (child.nodeType === 1 && nodeName !== 'LI' && permitted.indexOf(nodeName) === -1) {\n            bad.push(child);\n          } else if (child.nodeType === 3 && child.nodeValue.trim() !== '') {\n            hasNonEmptyTextNode = true;\n          }\n        }\n        if (bad.length) {\n          this.relatedNodes(bad);\n        }\n        return !!bad.length || hasNonEmptyTextNode;\n      }",
   "enabled": true
  },
  {
   "id": "listitem",
   "evaluate": "function evaluate(node, options) {\n        if ([ 'UL', 'OL' ].indexOf(node.parentNode.nodeName.toUpperCase()) !== -1) {\n          return true;\n        }\n        return node.parentNode.getAttribute('role') === 'list';\n      }",
   "enabled": true
  },
  {
   "id": "meta-refresh",
   "evaluate": "function evaluate(node, options) {\n        var content = node.getAttribute('content') || '', parsedParams = content.split(/[;,]/);\n        return content === '' || parsedParams[0] === '0';\n      }",
   "enabled": true
  },
  {
   "id": "meta-viewport",
   "options": {
    "scaleMinimum": 2
   },
   "evaluate": "function evaluate(node, options) {\n        options = options || {};\n        var params, content = node.getAttribute('content') || '', parsedParams = content.split(/[;,]/), result = {}, minimum = options.scaleMinimum || 2, lowerBound = options.lowerBound || false;\n        for (var i = 0, l = parsedParams.length; i < l; i++) {\n          params = parsedParams[i].split('=');\n          var key = params.shift().toLowerCase();\n          if (key && params.length) {\n            result[key.trim()] = params.shift().trim().toLowerCase();\n          }\n        }\n        if (lowerBound && result['maximum-scale'] && parseFloat(result['maximum-scale']) < lowerBound) {\n          return true;\n        }\n        if (!lowerBound && result['user-scalable'] === 'no') {\n          return false;\n        }\n        if (result['maximum-scale'] && parseFloat(result['maximum-scale']) < minimum) {\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "p-as-heading",
   "options": {
    "margins": [
     {
      "weight": 150,
      "italic": true
     },
     {
      "weight": 150,
      "size": 1.15
     },
     {
      "italic": true,
      "size": 1.15
     },
     {
      "size": 1.4
     }
    ]
   },
   "evaluate": "function evaluate(node, options) {\n        var siblings = Array.from(node.parentNode.children);\n        var currentIndex = siblings.indexOf(node);\n        options = options || {};\n        var margins = options.margins || [];\n        var nextSibling = siblings.slice(currentIndex + 1).find(function(elm) {\n          return elm.nodeName.toUpperCase() === 'P';\n        });\n        var prevSibling = siblings.slice(0, currentIndex).reverse().find(function(elm) {\n          return elm.nodeName.toUpperCase() === 'P';\n        });\n        function getTextContainer(elm) {\n          var nextNode = elm;\n          var outerText = elm.textContent.trim();\n          var innerText = outerText;\n          while (innerText === outerText && nextNode !== undefined) {\n            var i = -1;\n            elm = nextNode;\n            if (elm.children.length === 0) {\n              return elm;\n            }\n            do {\n              i++;\n              innerText = elm.children[i].textContent.trim();\n            } while (innerText === '' && i + 1 < elm.children.length);\n            nextNode = elm.children[i];\n          }\n          return elm;\n        }\n        function normalizeFontWeight(weight) {\n          switch (weight) {\n           case 'lighter':\n            return 100;\n\n           case 'normal':\n            return 400;\n\n           case 'bold':\n            return 700;\n\n           case 'bolder':\n            return 900;\n          }\n          weight = parseInt(weight);\n          return !isNaN(weight) ? weight : 400;\n        }\n        function getStyleValues(node) {\n          var style = window.getComputedStyle(getTextContainer(node));\n          return {\n            fontWeight: normalizeFontWeight(style.getPropertyValue('font-weight')),\n            fontSize: parseInt(style.getPropertyValue('font-size')),\n            isItalic: style.getPropertyValue('font-style') === 'italic'\n          };\n        }\n        function isHeaderStyle(styleA, styleB, margins) {\n          return margins.reduce(function(out, margin) {\n            return out || (!margin.size || styleA.fontSize / margin.size > styleB.fontSize) && (!margin.weight || styleA.fontWeight - margin.weight > styleB.fontWeight) && (!margin.italic || styleA.isItalic && !styleB.isItalic);\n          }, false);\n        }\n        var currStyle = getStyleValues(node);\n        var nextStyle = nextSibling ? getStyleValues(nextSibling) : null;\n        var prevStyle = prevSibling ? getStyleValues(prevSibling) : null;\n        if (!nextStyle || !isHeaderStyle(currStyle, nextStyle, margins)) {\n          return true;\n        }\n        var blockquote = axe.commons.dom.findUp(node, 'blockquote');\n        if (blockquote && blockquote.nodeName.toUpperCase() === 'BLOCKQUOTE') {\n          return undefined;\n        }\n        if (prevStyle && !isHeaderStyle(currStyle, prevStyle, margins)) {\n          return undefined;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "exists",
   "evaluate": "function evaluate(node, options) {\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "caption-faked",
   "evaluate": "function evaluate(node, options) {\n        var table = axe.commons.table.toGrid(node);\n        var firstRow = table[0];\n        if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) {\n          return true;\n        }\n        return firstRow.reduce(function(out, curr, i) {\n          return out || curr !== firstRow[i + 1] && firstRow[i + 1] !== undefined;\n        }, false);\n      }",
   "enabled": true
  },
  {
   "id": "td-has-header",
   "evaluate": "function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var badCells = [];\n        var cells = tableUtils.getAllCells(node);\n        cells.forEach(function(cell) {\n          if (axe.commons.dom.hasContent(cell) && tableUtils.isDataCell(cell) && !axe.commons.aria.label(cell)) {\n            var hasHeaders = tableUtils.getHeaders(cell);\n            hasHeaders = hasHeaders.reduce(function(hasHeaders, header) {\n              return hasHeaders || header !== null && !!axe.commons.dom.hasContent(header);\n            }, false);\n            if (!hasHeaders) {\n              badCells.push(cell);\n            }\n          }\n        });\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "td-headers-attr",
   "evaluate": "function evaluate(node, options) {\n        var cells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          var row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cells.push(row.cells[cellIndex]);\n          }\n        }\n        var ids = cells.reduce(function(ids, cell) {\n          if (cell.getAttribute('id')) {\n            ids.push(cell.getAttribute('id'));\n          }\n          return ids;\n        }, []);\n        var badCells = cells.reduce(function(badCells, cell) {\n          var isSelf, notOfTable;\n          var headers = (cell.getAttribute('headers') || '').split(/\\s/).reduce(function(headers, header) {\n            header = header.trim();\n            if (header) {\n              headers.push(header);\n            }\n            return headers;\n          }, []);\n          if (headers.length !== 0) {\n            if (cell.getAttribute('id')) {\n              isSelf = headers.indexOf(cell.getAttribute('id').trim()) !== -1;\n            }\n            notOfTable = headers.reduce(function(fail, header) {\n              return fail || ids.indexOf(header) === -1;\n            }, false);\n            if (isSelf || notOfTable) {\n              badCells.push(cell);\n            }\n          }\n          return badCells;\n        }, []);\n        if (badCells.length > 0) {\n          this.relatedNodes(badCells);\n          return false;\n        } else {\n          return true;\n        }\n      }",
   "enabled": true
  },
  {
   "id": "th-has-data-cells",
   "evaluate": "function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var cells = tableUtils.getAllCells(node);\n        var checkResult = this;\n        var reffedHeaders = [];\n        cells.forEach(function(cell) {\n          var headers = cell.getAttribute('headers');\n          if (headers) {\n            reffedHeaders = reffedHeaders.concat(headers.split(/\\s+/));\n          }\n          var ariaLabel = cell.getAttribute('aria-labelledby');\n          if (ariaLabel) {\n            reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\\s+/));\n          }\n        });\n        var headers = cells.filter(function(cell) {\n          if (axe.commons.text.sanitize(cell.textContent) === '') {\n            return false;\n          }\n          return cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1;\n        });\n        var tableGrid = tableUtils.toGrid(node);\n        var out = headers.reduce(function(res, header) {\n          if (header.getAttribute('id') && reffedHeaders.includes(header.getAttribute('id'))) {\n            return !res ? res : true;\n          }\n          var hasCell = false;\n          var pos = tableUtils.getCellPosition(header, tableGrid);\n          if (tableUtils.isColumnHeader(header)) {\n            hasCell = tableUtils.traverse('down', pos, tableGrid).reduce(function(out, cell) {\n              return out || axe.commons.dom.hasContent(cell) && !tableUtils.isColumnHeader(cell);\n            }, false);\n          }\n          if (!hasCell && tableUtils.isRowHeader(header)) {\n            hasCell = tableUtils.traverse('right', pos, tableGrid).reduce(function(out, cell) {\n              return out || axe.commons.dom.hasContent(cell) && !tableUtils.isRowHeader(cell);\n            }, false);\n          }\n          if (!hasCell) {\n            checkResult.relatedNodes(header);\n          }\n          return res && hasCell;\n        }, true);\n        return out ? true : undefined;\n      }",
   "enabled": true
  },
  {
   "id": "description",
   "evaluate": "function evaluate(node, options) {\n        var tracks = node.querySelectorAll('track');\n        if (tracks.length) {\n          for (var i = 0; i < tracks.length; i++) {\n            var kind = tracks[i].getAttribute('kind');\n            if (kind && kind === 'descriptions') {\n              return false;\n            }\n          }\n          return true;\n        }\n        return undefined;\n      }",
   "enabled": true
  }
 ],
 "data": {
  "rules": {
   "accesskeys": {
    "description": "Ensures every accesskey attribute value is unique",
    "help": "accesskey attribute value must be unique"
   },
   "area-alt": {
    "description": "Ensures <area> elements of image maps have alternate text",
    "help": "Active <area> elements must have alternate text",
    "mapping": {
     "ruleId": "010109-A",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Missing text equivalent for area."
    }
   },
   "aria-allowed-attr": {
    "description": "Ensures ARIA attributes are allowed for an element's role",
    "help": "Elements must only use allowed ARIA attributes",
    "mapping": {
     "ruleId": "ARIA_ATTRIBUTE_VALID",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Checks all attributes that start with 'aria-' to ensure that they are all official WAI-ARIA attributes"
    }
   },
   "aria-hidden-body": {
    "description": "Ensures aria-hidden='true' is not present on the document body.",
    "help": "aria-hidden='true' must not be present on the document body"
   },
   "aria-required-attr": {
    "description": "Ensures elements with ARIA roles have all required ARIA attributes",
    "help": "Required ARIA attributes must be provided",
    "mapping": {
     "ruleId": "ARIA_ROLE_REQUIRED_ATTRIBUTES",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Checks all elements that contain WAI-ARIA roles to ensure that all required aria- attributes are present"
    }
   },
   "aria-required-children": {
    "description": "Ensures elements with an ARIA role that require child roles contain them",
    "help": "Certain ARIA roles must contain particular children",
    "mapping": {
     "ruleId": "ARIA_ROLE_REQUIRED_CHILDREN",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Checks all elements that contain a WAI-ARIA role to ensure that all required children roles are present"
    }
   },
   "aria-required-parent": {
    "description": "Ensures elements with an ARIA role that require parent roles are contained by them",
    "help": "Certain ARIA roles must be contained by particular parents",
    "mapping": {
     "ruleId": "ARIA_ROLE_REQUIRED_PARENTS",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Checks all elements that contain a WAI-ARIA role to ensure that all required parent roles are present"
    }
   },
   "aria-roles": {
    "description": "Ensures all elements with a role attribute use a valid value",
    "help": "ARIA roles used must conform to valid values",
    "mapping": {
     "ruleId": "ARIA_ROLE_VALID",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Checks all elements that contain the WAI-ARIA role attribute to ensure that the role value is valid"
    }
   },
   "aria-valid-attr-value": {
    "description": "Ensures all ARIA attributes have valid values",
    "help": "ARIA attributes must conform to valid values",
    "mapping": {
     "ruleId": "ARIA_ATTRIBUTE_VALUES",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Checks all elements that contain WAI-ARIA atributes to ensure that the values of the attributes are valid"
    }
   },
   "aria-valid-attr": {
    "description": "Ensures attributes that begin with aria- are valid ARIA attributes",
    "help": "ARIA attributes must conform to valid names",
    "mapping": {
     "ruleId": "ARIA_ATTRIBUTE_VALID",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Checks all elements that contain WAI-ARIA attributes to ensure that the attributes are valid attributes"
    }
   },
   "audio-caption": {
    "description": "Ensures <audio> elements have captions",
    "help": "<audio> elements must have a captions track",
    "mapping": {
     "ruleId": "010402-D",
     "SC": "1.2.2",
     "weight": 0,
     "description": "Checks the use of all <audio> element to ensure that the element contains a <caption> element"
    }
   },
   "blink": {
    "description": "Ensures <blink> elements are not used",
    "help": "<blink> elements are deprecated and must not be used",
    "mapping": {
     "ruleId": "070201-A",
     "SC": "2.2.2",
     "weight": 0,
     "description": "Checks to make sure that the <blink> tag is never used"
    }
   },
   "button-name": {
    "description": "Ensures buttons have discernible text",
    "help": "Buttons must have discernible text",
    "mapping": {
     "ruleId": "SC412BTN",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Checks all <button> elements to ensure that they have a discernable accessible name"
    }
   },
   "bypass": {
    "description": "Ensures each page has at least one mechanism for a user to bypass navigation and jump straight to the content",
    "help": "Page must have means to bypass repeated blocks",
    "mapping": {
     "ruleId": "N130601-A",
     "SC": "2.4.1",
     "weight": 3,
     "description": "There is no mechanism to bypass navigation links."
    }
   },
   "color-contrast": {
    "description": "Ensures the contrast between foreground and background colors meets WCAG 2 AA contrast ratio thresholds",
    "help": "Elements must have sufficient color contrast",
    "mapping": {
     "ruleId": "020201-A",
     "SC": "1.4.3",
     "weight": 2,
     "description": "Checks all elements to ensure that the contrast between the foreground and the background meets the WCAG 2 AA contrast ratio thresholds."
    }
   },
   "definition-list": {
    "description": "Ensures <dl> elements are structured correctly",
    "help": "<dl> elements must only directly contain properly-ordered <dt> and <dd> groups, <script> or <template> elements",
    "mapping": {
     "ruleId": "SC411VAL",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Ensures that all <dl> elements are structured correctly"
    }
   },
   "dlitem": {
    "description": "Ensures <dt> and <dd> elements are contained by a <dl>",
    "help": "<dt> and <dd> elements must be contained by a <dl>",
    "mapping": {
     "ruleId": "SC411VAL",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Ensures that all <dd> and <dt> elements have a <dl> as a parent"
    }
   },
   "document-title": {
    "description": "Ensures each HTML document contains a non-empty <title> element",
    "help": "Documents must have <title> element to aid in navigation",
    "mapping": {
     "ruleId": "130201-C",
     "SC": "2.4.2",
     "weight": 0,
     "description": "Supply a valid title element for this document that is non-empty and useful."
    }
   },
   "duplicate-id": {
    "description": "Ensures every id attribute value is unique",
    "help": "id attribute value must be unique",
    "mapping": {
     "ruleId": "SC411NID",
     "SC": "4.1.1",
     "weight": 0,
     "description": "Ensures that each element on the page with an ID attribute has a unique ID attribute value"
    }
   },
   "frame-title": {
    "description": "Ensures <iframe> and <frame> elements contain a non-empty title attribute",
    "help": "Frames must have title attribute",
    "mapping": {
     "ruleId": "120101-A",
     "SC": "4.1.2",
     "weight": 2,
     "description": "Ensure that all iframe and frame elements contain a unique and non-empty title attribute"
    }
   },
   "html-has-lang": {
    "description": "Ensures every HTML document has a lang attribute",
    "help": "<html> element must have a lang attribute"
   },
   "html-lang-valid": {
    "description": "Ensures the lang attribute of the <html> element has a valid value",
    "help": "<html> element must have a valid value for the lang attribute"
   },
   "image-alt": {
    "description": "Ensures <img> elements have alternate text or a role of none or presentation",
    "help": "Images must have alternate text",
    "mapping": {
     "ruleId": "IMG_NO_ALT",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <img> element has an alternative text or is marked as presentational"
    }
   },
   "input-image-alt": {
    "description": "Ensures <input type=\"image\"> elements have alternate text",
    "help": "Image buttons must have alternate text",
    "mapping": {
     "ruleId": "010103-A",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <input> that represents an image button has an accessible name"
    }
   },
   "label": {
    "description": "Ensures every form element has a label",
    "help": "Form elements must have labels",
    "mapping": {
     "ruleId": "120401-E",
     "SC": "1.3.1",
     "weight": 0,
     "description": "Ensures that every input element that requires a label, has an appropriate label"
    }
   },
   "layout-table": {
    "description": "Ensures presentational <table> elements do not use <th>, <caption> elements or the summary attribute",
    "help": "Layout tables must not use data table elements",
    "mapping": {
     "ruleId": "050401-A",
     "SC": "1.3.1",
     "weight": 1,
     "description": "Ensures that <table> elements that are being used for layout do not contain markup only relevant for data tables"
    }
   },
   "link-in-text-block": {
    "description": "Links can be distinguished without relying on color",
    "help": "Links must be distinguished from surrounding text in a way that does not rely on color"
   },
   "link-name": {
    "description": "Ensures links have discernible text",
    "help": "Links must have discernible text",
    "mapping": {
     "ruleId": "SC412LNKN",
     "SC": "4.1.2",
     "weight": 1,
     "description": "Ensures that every link has an accessible name"
    }
   },
   "list": {
    "description": "Ensures that lists are structured correctly",
    "help": "<ul> and <ol> must only directly contain <li>, <script> or <template> elements",
    "mapping": {
     "ruleId": "030601-C",
     "SC": "1.3.1",
     "weight": 1,
     "description": "Ensures that lists are structured correctly"
    }
   },
   "listitem": {
    "description": "Ensures <li> elements are used semantically",
    "help": "<li> elements must be contained in a <ul> or <ol>",
    "mapping": {
     "ruleId": "030601-A",
     "SC": "1.3.1",
     "weight": 1,
     "description": "Ensures that every list item is used semantically"
    }
   },
   "marquee": {
    "description": "Ensures <marquee> elements are not used",
    "help": "<marquee> elements are deprecated and must not be used",
    "mapping": {
     "ruleId": "070301-A",
     "SC": "2.2.2",
     "weight": 0,
     "description": "Ensures that the deprecated <marquee> tag is not used"
    }
   },
   "meta-refresh": {
    "description": "Ensures <meta http-equiv=\"refresh\"> is not used",
    "help": "Timed refresh must not exist",
    "mapping": {
     "ruleId": "070401-A",
     "SC": "2.2.4",
     "weight": 1,
     "description": "Ensures that <meta> refresh is not used"
    }
   },
   "meta-viewport": {
    "description": "Ensures <meta name=\"viewport\"> does not disable text scaling and zooming",
    "help": "Zooming and scaling must not be disabled",
    "mapping": {}
   },
   "object-alt": {
    "description": "Ensures <object> elements have alternate text",
    "help": "<object> elements must have alternate text",
    "mapping": {
     "ruleId": "010105-A",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <object> element has a text alternative"
    }
   },
   "p-as-heading": {
    "description": "Ensure p elements are not used to style headings",
    "help": "Bold, italic text and font-size are not used to style p elements as a heading"
   },
   "server-side-image-map": {
    "description": "Ensures that server-side image maps are not used",
    "help": "Server-side image maps must not be used",
    "mapping": {
     "ruleId": "090101-A",
     "SC": "2.1.1",
     "weight": 0,
     "description": "Ensures that server-side image maps are never used"
    }
   },
   "table-fake-caption": {
    "description": "Ensure that tables with a caption use the <caption> element.",
    "help": "Data or header cells should not be used to give caption to a data table.",
    "mapping": {}
   },
   "td-has-header": {
    "description": "Ensure that each non-empty data cell in a large table has one or more table headers",
    "help": "All non-empty td element in table larger than 3 by 3 must have an associated table header",
    "mapping": {}
   },
   "td-headers-attr": {
    "description": "Ensure that each cell in a table using the headers refers to another cell in that table",
    "help": "All cells in a table element that use the headers attribute must only refer to other cells of that same table"
   },
   "th-has-data-cells": {
    "description": "Ensure that each table header in a data table refers to data cells",
    "help": "All th elements and elements with role=columnheader/rowheader must have data cells they describe",
    "mapping": {}
   },
   "valid-lang": {
    "description": "Ensures lang attributes have valid values",
    "help": "lang attribute must have a valid value",
    "mapping": {
     "ruleId": "040101-B",
     "SC": "3.1.2",
     "weight": 1,
     "description": "Ensures that when the 'lang' attribute is used, it has a valid value"
    }
   },
   "video-caption": {
    "description": "Ensures <video> elements have captions",
    "help": "<video> elements must have captions",
    "mapping": {
     "ruleId": "010402-D",
     "SC": "1.2.2",
     "weight": 1,
     "description": "Ensures that the HTML5 <video> tag is captioned"
    }
   },
   "video-description": {
    "description": "Ensures <video> elements have audio descriptions",
    "help": "<video> elements must have an audio description track",
    "mapping": {
     "ruleId": "010301-Q1",
     "SC": "1.2.5",
     "weight": 1,
     "description": "Ensures that every <video> tag has an audio description"
    }
   }
  },
  "checks": {
   "accesskeys": {
    "impact": "serious"
   },
   "non-empty-alt": {
    "impact": "critical"
   },
   "non-empty-title": {
    "impact": "serious"
   },
   "aria-label": {
    "impact": "serious"
   },
   "aria-labelledby": {
    "impact": "serious"
   },
   "aria-allowed-attr": {
    "impact": "critical"
   },
   "aria-hidden-body": {
    "impact": "critical"
   },
   "aria-required-attr": {
    "impact": "critical"
   },
   "aria-required-children": {
    "impact": "critical"
   },
   "aria-required-parent": {
    "impact": "critical"
   },
   "invalidrole": {
    "impact": "critical"
   },
   "abstractrole": {
    "impact": "serious"
   },
   "aria-valid-attr-value": {
    "impact": "critical"
   },
   "aria-errormessage": {
    "impact": "critical"
   },
   "aria-valid-attr": {
    "impact": "critical"
   },
   "caption": {
    "impact": "critical"
   },
   "is-on-screen": {
    "impact": "serious"
   },
   "non-empty-if-present": {
    "impact": "critical"
   },
   "non-empty-value": {
    "impact": "critical"
   },
   "button-has-visible-text": {
    "impact": "critical"
   },
   "role-presentation": {
    "impact": "minor"
   },
   "role-none": {
    "impact": "minor"
   },
   "focusable-no-name": {
    "impact": "serious"
   },
   "internal-link-present": {
    "impact": "serious"
   },
   "header-present": {
    "impact": "serious"
   },
   "landmark": {
    "impact": "serious"
   },
   "color-contrast": {
    "impact": "serious"
   },
   "structured-dlitems": {
    "impact": "serious"
   },
   "only-dlitems": {
    "impact": "serious"
   },
   "dlitem": {
    "impact": "serious"
   },
   "doc-has-title": {
    "impact": "serious"
   },
   "duplicate-id": {
    "impact": "moderate"
   },
   "has-lang": {
    "impact": "serious"
   },
   "valid-lang": {
    "impact": "serious"
   },
   "has-alt": {
    "impact": "critical"
   },
   "implicit-label": {
    "impact": "critical"
   },
   "explicit-label": {
    "impact": "critical"
   },
   "help-same-as-label": {
    "impact": "minor"
   },
   "multiple-label": {
    "impact": "serious"
   },
   "has-th": {
    "impact": "serious"
   },
   "has-caption": {
    "impact": "serious"
   },
   "has-summary": {
    "impact": "serious"
   },
   "link-in-text-block": {
    "impact": "serious"
   },
   "has-visible-text": {
    "impact": "minor"
   },
   "only-listitems": {
    "impact": "serious"
   },
   "listitem": {
    "impact": "serious"
   },
   "meta-refresh": {
    "impact": "critical"
   },
   "meta-viewport": {
    "impact": "critical"
   },
   "p-as-heading": {
    "impact": "serious"
   },
   "exists": {
    "impact": "minor"
   },
   "caption-faked": {
    "impact": "serious"
   },
   "td-has-header": {
    "impact": "critical"
   },
   "td-headers-attr": {
    "impact": "serious"
   },
   "th-has-data-cells": {
    "impact": "serious"
   },
   "description": {
    "impact": "critical"
   }
  }
 }
};