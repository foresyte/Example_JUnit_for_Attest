var path = require('path'),
	fs = require('fs'),
	assert = require('chai').assert,
	process = require('process');

var attest = require('../index')();

describe('config', function() {
	describe('set with environment variable', function() {
		afterEach(function() {
			delete process.env.ATTEST_PATH;
		});

		it('should locate a config file', function() {
			process.env.ATTEST_PATH = path.join(process.cwd(), 'test/config-env.json');
			assert.doesNotThrow(attest.configureFunc, Error, 'There is no file at the location set in ATTEST_PATH.');
		});
	});

	describe('if environment variable is set to missing file', function() {
		afterEach(function() {
			delete process.env.ATTEST_PATH;
		});

		it('should throw an error', function() {
			process.env.ATTEST_PATH = path.join(process.cwd(), 'file-doesnt-exist.json');
			assert.throws(attest.configureFunc, Error, 'There is no file at the location set in ATTEST_PATH.');
		});
	});

	describe('local file instead of environment variable', function() {
		beforeEach(function() {
			delete process.env.ATTEST_PATH;
		});

		it('does not throw an error', function() {
			assert.doesNotThrow(attest.configureFunc, Error, 'Error loading local Attest config file');
		});
	});

	describe('neither local file or environment variable', function() {
		beforeEach(function() {
			delete process.env.ATTEST_PATH;
			fs.renameSync('attest.json', 'attest-renamed.json');
		});

		afterEach(function() {
			fs.renameSync('attest-renamed.json', 'attest.json');
		});

		it('does not throw a local config file error', function() {
			assert.doesNotThrow(attest.configureFunc, Error, 'Error loading local Attest config file');
		});
	});
});

describe('API output', function() {

	it('should return concatenated axe-core and axe.configure as a source string', function() {
		assert.isString(attest.source);
		assert.match(attest.source, /((axe\.configure\(\{(.+)\}\)\;))$/, 'regexp matches');
	});

	it('should return axe.configure as a string', function() {
		assert.isString(attest.configureString);
		assert.match(attest.configureString, /^axe.configure/, 'regexp matches');
	});

	it('should include the brand information in the string', function() {
		assert.match(attest.configureString, /"brand"\:"worldspace"/, 'includes brand');
	});

	it('should include the application information in the string', function() {
		assert.match(attest.configureString, /"application"\:"attestAPI"/, 'includes application');
	});

	it('should return a function to call axe.configure', function() {
		assert.isFunction(attest.configureFunc);
		assert.match(attest.configureFunc(), /^axe.configure/, 'regexp matches');
	});
});
