var fs = require('fs-extra');
var path = require('path');
var assert = require('chai').assert;
var attestReport = require('../reporter/attest-report');

describe('attestReport', function() {

	var dir = './test/tmp';

	before(function() {
		fs.removeSync(dir);
	});

	afterEach(function () {
		fs.removeSync(dir);
	});

	it('has an init function', function() {
		assert(typeof attestReport === 'object');
		assert(typeof attestReport.init === 'function');
	});

	it('creates a directory for the results', function() {
		assert(fs.existsSync(dir) === false);

		attestReport.init('myAttest', dir);

		assert(fs.existsSync(dir) === true);
	});

	describe('logTestResult', function () {
		var name = 'myAttest'
		var reporter;
		beforeEach(function () {
			reporter = attestReport.init(name, dir);
		});

		it('stores the test run as a JSON file with id in the name', function() {
			var id = 'mytestResult';
			reporter.logTestResult(id, {some: 'result'});

			var files = fs.readdirSync(dir);

			assert(files.length === 1, 'there is one file');
			assert(files[0] === name + '-' + id + '.json')

			var filePath = path.join(dir, files[0]);
			var content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
			assert(content.id === id);
			assert(content.name === 'myAttest');

			assert(typeof content.findings === 'object');
			var results = content.findings;
			assert(results.some === 'result');
		});

		it('stores the test run as a JSON file with a date when no id is provided', function() {
			reporter.logTestResult({some: 'result'});

			var files = fs.readdirSync(dir);

			var safeDateFormat = '\\d{4}-\\d{2}-\\d{2}T\\d{2} \\d{2} \\d{2}-\\d{4}';
			assert(files.length === 1, 'there is one file');
			assert(files[0].match(new RegExp(name + '-' + safeDateFormat + '\.json')) !== null, 'Expected filename to be name-datestring.json');
		})

	});

});
