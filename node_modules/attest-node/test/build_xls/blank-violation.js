
var blankViolation = require('../../reporter/build_xls/blank-violation');
var dataNoViol = require('../dummydata/no-violations.json');
var dataWithViol = require('../dummydata/with-violations.json');

var assert = require('chai').assert;

describe('blankViolation', function () {

  describe('given an array of checks', function () {
    var checks = [];

    before(function () {
      checks.push(dataNoViol);
      checks.push(dataWithViol);
    });

    it('should return an array', function () {
      var result = blankViolation(checks);
      assert(isArray(result));
    });

    describe('the array', function () {
      it('should be the same length as the checks passed in', function () {
        assert(checks.length == blankViolation(checks).length);
      });
    });
  });

  describe('given a check that contains no violations', function () {
    var checks = [];
    var violations;

    before(function () {
      checks.push(dataNoViol);
      var result = blankViolation(checks);
      violations = result[0].findings.violations;
    });

    it('should add a blank violation to the check', function () {
      assert(violations.length == 1);
    });

    describe('the blank violation should contain', function () {
      var violation;

      before(function () {
        violation = violations[0];
      });

      it('.id => "label"', function () {
        assert(violation.id == 'label');
      });

      it('.tags => ["blank"]', function () {
        assert(isArray(violation.tags));
        assert(violation.tags.length == 1);
        assert(violation.tags[0] == 'blank');
      });

      it('.help => "Blank violation"', function () {
        assert(violation.help == 'Blank violation');
      });

      it('.description => "Not a real violation"', function () {
        assert(violation.description == 'Not a real violation');
      });

      it('.nodes is an array', function () {
        assert(isArray(violation.nodes));
      });

      it('.nodes[0].target => "#blank-violation"', function () {
        var expected = '#blank-violation';
        assert(violation.nodes[0].target == expected);
      });

      it('.nodes[0].html => "<div id=\"blank-violation\">"', function () {
        var expected = '<div id=\"blank-violation\">';
        assert(violation.nodes[0].html == expected);
      });

      it('.nodes[0].failureSummary => "Not a real violation"', function () {
        var expected = 'Not a real violation';
        assert(violation.nodes[0].failureSummary == expected);
      });

      it('.helpUrl => null', function () {
        assert(violation.helpUrl === null);
      });
    });
  });
});

/**
 * Duck-type check for an array.
 *
 * @param {Mixed} arr
 * @return {Boolean}
 * @api private
 */

function isArray(arr) {
  return arr && typeof arr.push == 'function';
}
