/**
 * Module dependencies.
 */

var getUserAgents = require('./build_html/get-useragents');
var countNodes = require('./build_html/count-nodes');
var testTotals = require('./build_html/test-totals');
var shortName = require('./build_html/short-name');
var groupTestResults = require('./utils/group-test-runs');
var jade = require('jade');
var path = require('path');
var fs = require('fs-extra');

/**
 * Define constants.
 */

var ROOT = path.resolve(__dirname, '..');
var ASSETS_DIR = '/assets';
var TEMPLATE_FOOT = path.join(ROOT, './reporter/templates/default');
var REPORT_TEMPLATE = path.join(TEMPLATE_FOOT, 'index.jade');
var ASSETS_SRC = path.join(TEMPLATE_FOOT, ASSETS_DIR);

/**
 * Consume a `tests` object and produce an html report
 * for each method name it contains.
 *
 * @param {Object} data
 * @param {String} output
 * @api public
 */

function renderAsHtml(testResults, outputDir) {
  'use strict';

  try {
    // Create necessary directories
    if (!fs.existsSync(outputDir)) {
      fs.mkdirpSync(path.join(outputDir));
    }

    // Copy assets
    fs.copySync(ASSETS_SRC, path.join(outputDir, ASSETS_DIR));

    // Group testResults by name into a testSuite
    var testGroups = groupTestResults(testResults);
    var pages = testGroups.map(function (testSuite) {
      return {
        name: testSuite.name,
        path: testSuite.name + '.html'
      };
    });

    testGroups.forEach(function (testSuite) {
      try {
        // Create an html file for all test runs sharing the same name
        var html = jade.renderFile(REPORT_TEMPLATE, {
          filename: REPORT_TEMPLATE,
          pages: pages,
          pretty: true,
          testResults: testSuite.testResults,
          testName: testSuite.name,
          countNodes: countNodes,
          shortName: shortName,
          getBrowser: function (testResult) {
            if (typeof testResult.platform === 'object' && testResult.platform.userAgent) {
              return testResult.platform.userAgent;
            } else {
              return 'unknown';
            }
          },
          testTotals: testTotals(testResults),
          userAgents: getUserAgents(testResults)
        });

        // Write HTML
        var destPath = path.join(outputDir, testSuite.name + '.html');
        fs.writeFileSync(destPath, html);
      } catch (err) {
        console.log(err);
      }
    });
  } catch (e) {
    console.log(e);
    // cleanup
    fs.removeSync(outputDir);
    throw 'removing:' + outputDir;
  }

}

/**
 * Expose `renderAsHtml`.
 */

module.exports = renderAsHtml;
