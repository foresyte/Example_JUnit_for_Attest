
var readRecursively = require('fs-readdir-recursive');
var renderAsHtml = require('./render-as-html');
var renderAsJUnitXML = require('./render-as-junit-xml');
var sortByTime = require('./utils/sort-by-time');
var path = require('path');
var fs = require('fs');
var dateFormat = require('dateformat');

/**
 * Get the data from any test runs stored as json files in a given directory
 *
 * @privae
 * @param  {string} pathToData
 * @return {array}            List of attest test runs
 */
function getResultsFromDir(pathToData) {
	var testResults = readRecursively(pathToData)
	// Read all json files
	.filter(function (file) {
		return path.extname(file) === '.json';
	})
	.map(function (file) {
		var filename = path.join(pathToData, file);
		return fs.readFileSync(filename, 'utf-8');
	})
	// parse and sort them
	.map(function (data) {
		return JSON.parse(data);
	});

	testResults.sort(sortByTime);

	return testResults.filter(function (testResult) {
		return (typeof testResult === 'object' &&
			testResult.type === 'attest-result');
	});
}

/**
 * Create a reporter for Attest results
 * @param  {string} name  Name for the test case
 * @param  {object} jsonDir Location in which the data is stored (default: ./attest-results)
 * @return {Reporter}
 */
function reportFactory(name, jsonDir) {
	var cachedResults = false;
	var testResults = [];
	jsonDir = path.join(process.cwd(), jsonDir || './attest-results');

	if (!fs.existsSync(jsonDir) || !fs.statSync(jsonDir).isDirectory()) {
		fs.mkdirSync(jsonDir);
	}

	var reporter = {
		/**
		 * Get all Test runs that ran
		 * @param  {string} browser Filter them by browser
		 * @return {array}         testResults
		 */
		getTestResults: function (userAgent) {
			if (!cachedResults) {
				testResults = getResultsFromDir(jsonDir);
				cachedResults = true;
			}

			var result = [].concat(testResults);
			if (userAgent) {
				result = result.filter(function (testResult) {
					return (typeof testResult.platform === 'object' &&
							testResult.platform.userAgent === userAgent);
				});
			}
			return result;
		},

		/**
		 * Add a new test run
		 * @param {string} id        id of the current test run
		 * @param {object} finding   As returned by Attest
		 * @param {object} options   Includes { fileName, line, browser }
		 */
		logTestResult: function (id, findings, options) {
			//jshint maxstatements:21
			var fileName;
			if (typeof id === 'object') {
				options = findings;
				findings = id;
				id = false;
			}
			var date = dateFormat('isoDateTime');
			var safeDate = date.replace(/[:]/g, ' ').replace('+', '-');
			if (!id) {
				id = name + '-' + date;
				fileName = name + '-' + safeDate;
			} else {
				fileName = name + '-' + id;
			}

			options = options || {};
			var testResult = {
				type: 'attest-result',
				name: name,
				id: id,
				endTime: date,
				platform: {
					userAgent: options.userAgent,
					testMachine: options.testMachine,
				},
				testSubject: {
					fileName: options.fileName || findings.url,
					state: options.state,
					lineNum: options.lineNum
				},
				findings: findings
			};

			var filePath = path.join(jsonDir, fileName + '.json');
			if (!fs.existsSync(filePath)) {
				var out = fs.writeFileSync(filePath, JSON.stringify(testResult, null, '  '), 'utf8');
				if (out !== undefined) {
					throw new Error('did not save file');
				}

				if (cachedResults) {
					testResults.push(testResult);
				}
			} else {
				throw new Error('File at ' + filePath + ' already exists');
			}
		},

		/**
		 * Create an HTML report for the current test
		 * @param  {string} outputPath
		 * @param  {string} browser    Filter for which browsers to include
		 */
		buildHTML: function (outputPath, browser) {
			var testResults = reporter.getTestResults(browser);
			renderAsHtml(testResults, outputPath);
		},

		/**
		 * Create an XLS report for the current test
		 * @param  {string} outputPath
		 * @param  {string} browser    Filter for which browsers to include
		 */
		// buildXLS: function (outputPath, browser) {
		// 	var testResults = reporter.getTestResults(browser);
		// 	renderAsXls(testResults, outputPath);
		// },

		/**
		 * Create an JUnit XML report for the current test
		 * @param  {string} outputPath
		 * @param  {string} browser    Filter for which browsers to include
		 */
		buildJUnitXML: function (outputPath, browser) {
			var testResults = reporter.getTestResults(browser);
			renderAsJUnitXML(testResults, outputPath);
		}
	};
	return reporter;
}

module.exports = {
	init: reportFactory
};
