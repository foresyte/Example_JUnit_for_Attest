
// Require dependencies
var path = require('path');
var fs = require('fs-extra');

/**
 * Escape a string to be safely inserted into xml
 * @param  {[type]} str [description]
 * @return {[type]}     [description]
 */
function escapeXml(str) {
    return (str || '').replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;');
}

function escapePkg(str) {
    return escapeXml((str || '').replace('.', '_'));
}

/**
 * Create an XML string of an element
 * @param  {[type]} elmName [description]
 * @param  {[type]} content [description]
 * @return {[type]}         [description]
 */
function xmlElm(elmName, attr, content) {
    if (typeof content === 'undefined' && typeof attr !== 'object') {
        content = attr;
        attr = {};
    }
    var attrString = Object.keys(attr)
    .map(function(attrKey) {
        return ' ' + attrKey + '="' + attr[attrKey] + '"';
    }).join('');

    if (content) {
        return '<' + elmName + attrString + '>\n' + content + '\n</' + elmName + '>';
    } else {
        return '<' + elmName + attrString + ' />';
    }
}

/**
 * Built the a testCase xml string out of a testResult object
 * @param  {object} testResult
 * @return {string}
 */
function buildTestCasesXml(testResult) {
    var violations = (testResult.findings.violations || []);
    var passes = (testResult.findings.passes || []);
    var testcases = '';

    testcases = violations.map(function(violation) {
        var url = testResult.findings.url || '';
        var failAttr = {
            message: escapeXml(violation.description) + '\n' +
                escapeXml(violation.helpUrl),
        };

        var body = violation.nodes.map(function(node) {
            return 'CSS Path: ' + node.target.join(' >>> ') + escapeXml(node.html);
        }).join('\n\n --------\n\n');

        return xmlElm('testcase', {
            name: escapeXml(violation.id)
        }, xmlElm('failure', failAttr, url + escapeXml(body)) );

    }).join('\n');

    testcases += '\n' + (passes.map(function (pass) {
        return xmlElm('testcase', { name: escapeXml(pass.id) });
    }).join('\n'));

    return testcases;
}

/**
 * Get a JUnit XML format of the testResults
 * @param  {array} testResults
 * @return {string}
 */
function buildTestSuitesXml(testResults) {
    // Concat each testsuite element
    var testsuites = testResults.map(function (testResult) {
        var attr = {
            name: escapePkg(testResult.name) + '.' +
                escapePkg(testResult.id),
            package: escapePkg(testResult.name),
            timestamp: escapeXml(testResult.endTime)
        };

        var properties = [];

        // Create property elements for each property of platform
        Object.keys(testResult.platform || {})
        .forEach(function (prop) {
            properties.push(xmlElm('property', {
                name: 'platform.' + prop,
                value: testResult.platform[prop]
            }));
        });

        // Create property elements for each property of testSubject
        Object.keys(testResult.testSubject || {})
        .forEach(function (prop) {
            properties.push(xmlElm('property', {
                name: 'testSubject.' + prop,
                value: testResult.testSubject[prop]
            }));
        });
        var propXml = xmlElm('properties', properties.join('\n'));

        var testsuite = buildTestCasesXml(testResult);
        return xmlElm('testsuite', attr, propXml + '\n' + testsuite);

    }).join('\n');

    return testsuites;
}

/**
 * Render the xml suite to
 * @param  {[type]} testResults  [description]
 * @param  {[type]} outputDir [description]
 * @return {[type]}           [description]
 */
function renderAsJUnitXML(testResults, outputDir) {
    var testsuites = buildTestSuitesXml(testResults);
    var xmlString = '<?xml version="1.0" encoding="utf-8"?>\n' +
        xmlElm('testsuites', testsuites);

    var filePath = path.join(outputDir, 'attest-results.xml');
    if (xmlString) {
        fs.outputFileSync(filePath, xmlString);
    }
}

/**
 * Export the render function
 */
module.exports = renderAsJUnitXML;

