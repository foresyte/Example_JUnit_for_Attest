function AttestAPI(standard) {
	'use strict';

	var attestReport = require('./reporter/attest-report');
	var fs = require('fs');
	var path = require('path');

	var axe = require('axe-core');
	var s508 = require('./standards/508.js');
	var wcag = require('./standards/default.js');
	var devMin = require('./standards/dev-min.js');
	var standards = [{
						id: '508',
						defn: s508
					},{
						id: 'wcag2',
						defn: wcag
					},{
						id: 'devMin',
						defn: devMin
					}];
	var defn;
	var attestConfigFilename = './attest.json', configObject = {};

	function getAxeSource() {
		if (axe.source) {
			return axe.source;
		}
	}

	function setAxeConfigure(defn) {
		if (!defn) {
			if (process.env.ATTEST_PATH) {
				// let's try loading a config file
				// from the environment variable.
				try {
					configObject = require(path.resolve(process.cwd(), process.env.ATTEST_PATH));
				}
				catch (e) {
					throw new Error('There is no file at the location set in ATTEST_PATH.');
				}
			}
			else {
				// No environment variable, check for a local file.
				// Otherwise, configObject will default to empty object
				if (fs.existsSync(path.join(process.cwd(), attestConfigFilename))) {
					try {
						configObject = require(path.resolve(process.cwd(), attestConfigFilename));
					}
					catch (e) {
						throw new Error('Error loading local Attest config file');
					}
				}
			}
		} else {
			configObject = defn;
		}

		if (configObject !== undefined) {

			/*
			 * Implement branding of the helpUrls
			 */
			configObject.branding = {
				brand: 'worldspace',
				application: 'attestAPI'
			};

			return 'axe.configure(' + JSON.stringify(configObject) + ');';
		}
		else {
			throw new Error('Sorry! There was a problem loading config data.');
		}
	}

	if (standard) {
		defn = standards.filter(function (item) {
			return item.id === standard;
		})[0].defn;
	}

	return {
		source: getAxeSource() + setAxeConfigure(defn),
		configureString: setAxeConfigure(defn),
		report: attestReport.init,
		standards: standards,
		configureFunc: function() {
			return setAxeConfigure(defn);
		}
	};
}

exports = module.exports = AttestAPI;
